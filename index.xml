<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Stuart Blackler's Blog</title><link>https://im5tu.io/</link><description>Recent content on Stuart Blackler's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 11 Jul 2020 12:56:00 +0100</lastBuildDate><atom:link href="https://im5tu.io/index.xml" rel="self" type="application/rss+xml"/><item><title>My Favourite Git Aliases</title><link>https://im5tu.io/article/2020/07/my-favourite-git-aliases/</link><pubDate>Sat, 11 Jul 2020 12:56:00 +0100</pubDate><guid>https://im5tu.io/article/2020/07/my-favourite-git-aliases/</guid><description>&lt;p>Git aliases are used to create new git commands that can either invoke a function, or be used to create commands that map to longer commands. For example, we could map &lt;code>git co&lt;/code> to &lt;code>git checkout&lt;/code> or have &lt;code>git undo&lt;/code> undo our previous commit. In this article, I&amp;rsquo;m going to show you some of my favourite git aliases.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: An alternative approach to using dotnet-counters with Docker</title><link>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-an-alternative-approach-to-using-dotnet-counters-with-docker/</link><pubDate>Thu, 25 Jun 2020 22:56:00 +0100</pubDate><guid>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-an-alternative-approach-to-using-dotnet-counters-with-docker/</guid><description>&lt;p>In a &lt;a href="https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-using-dotnet-counters-with-docker/">previous article&lt;/a>, we took a look at a way to use &lt;code>dotnet-counters&lt;/code> with an external image. This article takes a look at how we can embed the tooling that we require into the image so that we extract the counter/memory information as required. This approach does not require elevated permissions as before.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: Listening to inbound HTTP requests</title><link>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-inbound-http-requests/</link><pubDate>Fri, 19 Jun 2020 14:00:00 +0000</pubDate><guid>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-inbound-http-requests/</guid><description>&lt;p>In my &lt;a href="https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-outbound-http-requests/">previous article&lt;/a> we took a look at how to monitor outbound HTTP requests using a &lt;code>DiagnosticListener&lt;/code>. In this article, we will re-use some of the same components to monitor inbound HTTP requests. We could use middleware to do as most approaches do, but this approach is highly dependent on the middleware that you have and the duration of this, so we will re-use some of the code from last time.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: Listening to outbound HTTP requests</title><link>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-outbound-http-requests/</link><pubDate>Thu, 18 Jun 2020 01:34:00 +0000</pubDate><guid>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-outbound-http-requests/</guid><description>&lt;p>Throughout the course of my Diagnostics in .Net Core series, we&amp;rsquo;ve taken a look at the basics of how to use the Event Counters API. In this article, we will take a look at how we can capture all outbound HTTP requests automatically as they occur.&lt;/p></description></item><item><title>Quick Tip: Minification of assets with Hugo</title><link>https://im5tu.io/article/2020/05/quick-tip-minification-of-assets-with-hugo/</link><pubDate>Sat, 16 May 2020 13:00:00 +0000</pubDate><guid>https://im5tu.io/article/2020/05/quick-tip-minification-of-assets-with-hugo/</guid><description>&lt;p>Today, I have been doing a general tidy up of my blog repository. One of the things that I decided to do, was reduce the overall amount of whitespace in the generated html files.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: Using dotnet-counters with Docker</title><link>https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-using-dotnet-counters-with-docker/</link><pubDate>Sat, 25 Jan 2020 13:00:00 +0000</pubDate><guid>https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-using-dotnet-counters-with-docker/</guid><description>&lt;p>In my &lt;a href="https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/">previous post&lt;/a>, I described how we can leverage the new EventCounter diagnostics API to add custom event counters and listen for built in counters. In this article, I will walk through how we can leverage the &lt;code>dotnet-counters&lt;/code> tool with a running docker image.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: Event Counters</title><link>https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/</link><pubDate>Sun, 05 Jan 2020 14:00:00 +0000</pubDate><guid>https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/</guid><description>&lt;p>Recently, I&amp;rsquo;ve been playing with the new &lt;a href="https://devblogs.microsoft.com/dotnet/introducing-diagnostics-improvements-in-net-core-3-0/">diagnostic improvements in .Net Core 3&lt;/a>. Traditionally, I&amp;rsquo;ve always used the great &lt;a href="https://github.com/AppMetrics/AppMetrics">AppMetrics&lt;/a> package to capture the metrics from our applications and send scrape them with a &lt;a href="https://github.com/prometheus/prometheus">Prometheus&lt;/a> &amp;amp; &lt;a href="https://github.com/grafana/grafana">Grafana&lt;/a> setup. Whilst reading about the improvements, I wondered whether or not it would be possible to push metrics to &lt;a href="https://github.com/prometheus/prometheus">Prometheus&lt;/a>.&lt;/p></description></item><item><title>Quick Tip: Accessing a Azure DevOps secret from within a scripted step</title><link>https://im5tu.io/article/2018/12/quick-tip-accessing-a-azure-devops-secret-from-within-a-scripted-step/</link><pubDate>Wed, 26 Dec 2018 14:00:00 +0000</pubDate><guid>https://im5tu.io/article/2018/12/quick-tip-accessing-a-azure-devops-secret-from-within-a-scripted-step/</guid><description>&lt;p>In today&amp;rsquo;s quick tip, we are going to see how we can access a secret that we&amp;rsquo;ve defined in a variable group as part of a Azure DevOps yml based build.&lt;/p></description></item><item><title>Building a custom build agent image with Docker and Azure DevOps pipelines</title><link>https://im5tu.io/article/2018/12/building-a-custom-build-agent-image-with-docker-and-azure-devops-pipelines/</link><pubDate>Mon, 24 Dec 2018 14:00:00 +0000</pubDate><guid>https://im5tu.io/article/2018/12/building-a-custom-build-agent-image-with-docker-and-azure-devops-pipelines/</guid><description>&lt;p>In this article, we will learn how to use a custom dockerfile as the bases for a customised Azure DevOps build agent. There are many reasons why you might want to do this, including running custom tooling that takes a while to setup or tooling that isn&amp;rsquo;t supported yet.&lt;/p></description></item><item><title>Utf8Json Media Formatters for ASP.Net Core</title><link>https://im5tu.io/article/2018/07/utf8json-media-formatters-for-asp.net-core/</link><pubDate>Sun, 29 Jul 2018 16:40:00 +0100</pubDate><guid>https://im5tu.io/article/2018/07/utf8json-media-formatters-for-asp.net-core/</guid><description>Recently, I have been looking at the Utf8Json project and evaluating for use in our high performance payments API. Looking at the benchmarks on the Github page, and running my own benchmarks, the numbers stated seemed to tally up, so I built a few media formatters for aspnet core.
Now, the project does already ship with some media formatters as a separate nuget package. However, I wanted to improve the following things:</description></item><item><title>Building Service Fabric Apps With VSTS YML Build Definitions</title><link>https://im5tu.io/article/2018/06/building-service-fabric-apps-with-vsts-yml-build-definitions/</link><pubDate>Sat, 30 Jun 2018 19:40:00 +0100</pubDate><guid>https://im5tu.io/article/2018/06/building-service-fabric-apps-with-vsts-yml-build-definitions/</guid><description>In my previous article, we setup a standarised build using the new YML build definitions within VSTS, using the .Net CLI tooling. In this article, we will use the same setup as our base, but we will build and publish a service fabric application.
Our sample build file has the following steps:
Clean Sources Install the Dotnet CLI Restore Packages Build Projects Test Projects Publish the Web App Publish Build Artifacts Tag VSTS Build For our service fabric build, we will need the following steps:</description></item><item><title>Automated Builds in VSTS with YML Build Definitions</title><link>https://im5tu.io/article/2018/06/automated-builds-in-vsts-with-yml-build-definitions/</link><pubDate>Sun, 17 Jun 2018 21:35:00 +0100</pubDate><guid>https://im5tu.io/article/2018/06/automated-builds-in-vsts-with-yml-build-definitions/</guid><description>In this article we will explore a preview feature inside of Visual Studio Team Services (VSTS) called YML Build Definitions. In essence, this allows you to change your build process from a .yml file in your git repository much in the same way as you can do with other services such as AppVeyor. During the article, we will setup a build definition for an Aspnet Core website.
Prerequisites Before we take a look at the struture of the file, you will need to complete the following tasks:</description></item><item><title>Ensuring samesite cookies with URL Rewrite</title><link>https://im5tu.io/article/2017/06/ensuring-samesite-cookies-with-url-rewrite/</link><pubDate>Sun, 11 Jun 2017 20:50:11 +0100</pubDate><guid>https://im5tu.io/article/2017/06/ensuring-samesite-cookies-with-url-rewrite/</guid><description>&lt;p>In this article, we will increase our websites level of protecting against Cross-Site Request Forgery and Cross-Site Script Inclusion attacks by appending an additional modifier to the &lt;code>Set-Cookie&lt;/code> HTTP header.&lt;/p></description></item><item><title>Ensuring secure cookies with URL Rewrite</title><link>https://im5tu.io/article/2017/06/ensuring-secure-cookies-with-url-rewrite/</link><pubDate>Sun, 11 Jun 2017 20:38:07 +0100</pubDate><guid>https://im5tu.io/article/2017/06/ensuring-secure-cookies-with-url-rewrite/</guid><description>&lt;p>In this article, we will take a look at secure cookies, that is by appending an additional modifier to the &lt;code>Set-Cookie&lt;/code> HTTP header.&lt;/p></description></item><item><title>Ensuring httpOnly cookies with URL Rewrite</title><link>https://im5tu.io/article/2017/06/ensuring-httponly-cookies-with-url-rewrite/</link><pubDate>Tue, 06 Jun 2017 15:01:04 +0100</pubDate><guid>https://im5tu.io/article/2017/06/ensuring-httponly-cookies-with-url-rewrite/</guid><description>&lt;p>In this article, I will give a brief overview of cookies, why we want them to be httpOnly and how we can ensure this via URL Rewrite. We will also be creating our first outbound rewrite rule with a pre-condition.&lt;/p></description></item><item><title>Removing trailing slashes with URL Rewrite</title><link>https://im5tu.io/article/2017/06/removing-trailing-slashes-with-url-rewrite/</link><pubDate>Mon, 05 Jun 2017 15:00:59 +0100</pubDate><guid>https://im5tu.io/article/2017/06/removing-trailing-slashes-with-url-rewrite/</guid><description>&lt;p>In the &lt;a href="https://im5tu.io/article/2017/06/canonical-host-urls-with-url-rewrite/">previous post&lt;/a>, I explained why canonical urls are important and how to enforce them . In this article, I will show you how to have a canonical host url.&lt;/p></description></item><item><title>Canonical host urls with URL Rewrite</title><link>https://im5tu.io/article/2017/06/canonical-host-urls-with-url-rewrite/</link><pubDate>Sun, 04 Jun 2017 15:00:55 +0100</pubDate><guid>https://im5tu.io/article/2017/06/canonical-host-urls-with-url-rewrite/</guid><description>In the previous post, I gave a brief intoduction to URL Rewriting and showed you how to get from HTTP to HTTPS. In this article, I will show you how to have a canonical host url.What is a canonical host url? It can be incredibly easy to distribute different urls for your website. Lets say that we have www.site.com/post1 and site.com/post1. If you&amp;rsquo;re a search engine, you think that these are different different pages with the same content.</description></item><item><title>Up and running with URL Rewrite - going from HTTP to HTTPS</title><link>https://im5tu.io/article/2017/06/up-and-running-with-url-rewrite-going-from-http-to-https/</link><pubDate>Sat, 03 Jun 2017 15:00:51 +0100</pubDate><guid>https://im5tu.io/article/2017/06/up-and-running-with-url-rewrite-going-from-http-to-https/</guid><description>&lt;p>In this series, I am going to take you through a few &lt;code>web.config&lt;/code> snippets that have come in handy for me when using URL Rewrite on IIS. Firstly, I am going to introduce the URL Rewrite module then show a sample of going from HTTP to HTTPS.&lt;/p></description></item><item><title>Domain Driven Design Notes</title><link>https://im5tu.io/article/2017/05/domain-driven-design-notes/</link><pubDate>Wed, 24 May 2017 16:25:48 +0100</pubDate><guid>https://im5tu.io/article/2017/05/domain-driven-design-notes/</guid><description>These are my notes on domain driven design whilst watching the course by Dino Esposito on Pluralsight.
Domain Driven Design (or DDD), is the process of discovering both data and behavioural requirements for a given problem domain where traditional approaches usually focus purely on data collection aspects. The aim is to provide better tools to tackle the complexity at the heart of software. Within DDD, there are two distinct parts: an analytical one and a strategical one.</description></item><item><title>5 Tips For Getting What You Want</title><link>https://im5tu.io/article/2017/04/5-tips-for-getting-what-you-want/</link><pubDate>Wed, 12 Apr 2017 16:25:48 +0100</pubDate><guid>https://im5tu.io/article/2017/04/5-tips-for-getting-what-you-want/</guid><description>&lt;p>Over recent months, some close friends and I have found ourselves in a bit of a rut and woken up to the fact that we aren&amp;rsquo;t getting any younger and don&amp;rsquo;t really have a plan. Naturally, this can be upsetting to a person and it&amp;rsquo;s something that can be easily rectified.&lt;/p></description></item><item><title>Talks: Episerver Content Providers &amp; Lightening Talk</title><link>https://im5tu.io/article/2017/04/talks-episerver-content-providers-lightening-talk/</link><pubDate>Tue, 04 Apr 2017 10:38:38 +0100</pubDate><guid>https://im5tu.io/article/2017/04/talks-episerver-content-providers-lightening-talk/</guid><description>&lt;p>On the 23rd of March, I had the opportunity to present at the Episerver meetup in Redweb&amp;rsquo;s London offices. I ended up giving two talks: Episerver Content Providers &amp;amp; a 5 minute lightening talk.&lt;/p></description></item><item><title>News Roundup March 2017</title><link>https://im5tu.io/article/2017/03/news-roundup-march-2017/</link><pubDate>Wed, 01 Mar 2017 19:32:24 +0000</pubDate><guid>https://im5tu.io/article/2017/03/news-roundup-march-2017/</guid><description>&lt;p>In this the first of many &lt;a href="https://im5tu.io/categories/news">news roundups&lt;/a>, I am going to look back through the news that you may have missed and the stories/blogs that have interested me over the previous month(s). In this round up I will be taking a look at content from arround mid January, through to the 1st March 2017.&lt;/p></description></item><item><title>OpenMessage 2017 Roadmap</title><link>https://im5tu.io/article/2017/02/openmessage-2017-roadmap/</link><pubDate>Sat, 11 Feb 2017 12:15:27 +0000</pubDate><guid>https://im5tu.io/article/2017/02/openmessage-2017-roadmap/</guid><description>&lt;p>&lt;a href="https://github.com/im5tu/openmessage">OpenMessage&lt;/a> originally started out as a replacement for an internal library that was used across teams. At the time, the team I was apart of needed the latest version of dotnet core for the library where as the other team were stuck on RC1. They were also developing features for that version of the framework and a few pre-existing details that we were unhappy with (eg: the request/response implementation). With that in mind, I created a minimal wrapper for what we needed. Looking forward, I plan to dedicate a bit more time to the project and improve it.&lt;/p></description></item><item><title>OpenMessage 1.1 Released</title><link>https://im5tu.io/article/2017/02/openmessage-1.1-released/</link><pubDate>Sun, 05 Feb 2017 15:31:54 +0000</pubDate><guid>https://im5tu.io/article/2017/02/openmessage-1.1-released/</guid><description>&lt;p>Just a quick update to say that the Azure provider for &lt;a href="https://github.com/Im5tu/OpenMessage">OpenMessage&lt;/a> has been released. This update fixes an issue with scheduling messages on topics.&lt;/p></description></item><item><title>My 2017</title><link>https://im5tu.io/article/2017/01/my-2017/</link><pubDate>Fri, 20 Jan 2017 13:55:18 +0000</pubDate><guid>https://im5tu.io/article/2017/01/my-2017/</guid><description>&lt;p>I&amp;rsquo;ve been thinking about writing this post for a little while now, but never seem to get around to it. I know that I&amp;rsquo;m massively late to the 2017 blog post party, but I didn&amp;rsquo;t really think about it for quite a while. I wanted to refocus and find out what I really wanted to achieve rather than a token guesture that would likely fail like previously. I&amp;rsquo;ve split this out into two main categories below: Personal and Professional Development.&lt;/p></description></item><item><title>Hugo Quick Tip: Inlining Css Files</title><link>https://im5tu.io/article/2016/12/hugo-quick-tip-inlining-css-files/</link><pubDate>Thu, 29 Dec 2016 20:25:58 +0000</pubDate><guid>https://im5tu.io/article/2016/12/hugo-quick-tip-inlining-css-files/</guid><description>&lt;p>Today I have been doing a little bit of work on my site and one of the things that I wanted to do is inline the css file. It&amp;rsquo;s quite a small file anyway, and once compressed with gzip should make a fairly minimal difference to the size of the page.&lt;/p></description></item><item><title>Write Good Code, Not Code Hastily</title><link>https://im5tu.io/article/2016/12/write-good-code-not-code-hastily/</link><pubDate>Wed, 21 Dec 2016 23:25:27 +0000</pubDate><guid>https://im5tu.io/article/2016/12/write-good-code-not-code-hastily/</guid><description>&lt;p>This article is a rework of a draft that I&amp;rsquo;ve had sitting in my drafts folder for a long while now. Over the last six months or so, I&amp;rsquo;ve been reviewing a lot more code than I had previously thanks in part to a promotion and in part, code reviewing applicants coding entries. Some of the code has been good, with some code, really not so good!&lt;/p></description></item><item><title>Blog Building - Part 4 - Frontend</title><link>https://im5tu.io/article/2016/11/blog-building-part-4-frontend/</link><pubDate>Sat, 19 Nov 2016 08:01:38 +0000</pubDate><guid>https://im5tu.io/article/2016/11/blog-building-part-4-frontend/</guid><description>&lt;p>So far we have built a very basic site and got a basic understanding of how to configure and override the theme. Next up we are going to configure our frontend workflow using yarn and gulp.&lt;/p></description></item><item><title>Blog Building - Part 3 - Theming</title><link>https://im5tu.io/article/2016/11/blog-building-part-3-theming/</link><pubDate>Fri, 18 Nov 2016 19:01:38 +0000</pubDate><guid>https://im5tu.io/article/2016/11/blog-building-part-3-theming/</guid><description>&lt;p>In this article, I will show you how the theme has been constructed and show you how the overrides work. So far we have created a site, setup most of our workflow and posted our first article.&lt;/p></description></item><item><title>Blog Building - Part 2 - My First Post</title><link>https://im5tu.io/article/2016/11/blog-building-part-2-my-first-post/</link><pubDate>Thu, 17 Nov 2016 23:01:38 +0000</pubDate><guid>https://im5tu.io/article/2016/11/blog-building-part-2-my-first-post/</guid><description>&lt;p>In &lt;a href="https://im5tu.io/article/2016/11/blog-building---part-1---hello-hugo/">the last article&lt;/a>, we setup our workflow and all the pieces that you will need to create a new site. Now we need to install a theme and begin publishing. Prior to writing this series, I began evaluating the extensibility of hugo themes and started work on something I call bones - a no thrills template with no styling, just structure. As I improve the template it will become more useful, maybe. It will remain the template behind mysite as I continue to improve it.&lt;/p></description></item><item><title>Blog Building - Part 1 - Hello Hugo</title><link>https://im5tu.io/article/2016/11/blog-building-part-1-hello-hugo/</link><pubDate>Thu, 17 Nov 2016 20:23:00 +0000</pubDate><guid>https://im5tu.io/article/2016/11/blog-building-part-1-hello-hugo/</guid><description>&lt;p>As promised in this first mini-series, I am going to guide you through the steps that I have taken to get my blog up and running on Github pages and Cloudflare with SSL. As these the steps that I have taken to get this blog up and running, your milage may vary with this as different versions get released. That said, you should be fine.&lt;/p></description></item><item><title>Hello World</title><link>https://im5tu.io/article/2016/11/hello-world/</link><pubDate>Thu, 17 Nov 2016 19:34:17 +0000</pubDate><guid>https://im5tu.io/article/2016/11/hello-world/</guid><description>&lt;p>Hello World. Safe to say it&amp;rsquo;s been a little while since I have blogged or even had a website come to think of it. Alas, I am back with some fresh ideas and recharged to help you dear reader.&lt;/p></description></item><item><title>Technical Debt: How We Get It And How To Avoid It</title><link>https://im5tu.io/article/2015/08/technical-debt-how-we-get-it-and-how-to-avoid-it/</link><pubDate>Wed, 05 Aug 2015 18:37:26 +0000</pubDate><guid>https://im5tu.io/article/2015/08/technical-debt-how-we-get-it-and-how-to-avoid-it/</guid><description>&lt;p>This post started as a rebuttal to Ralf Westphal&amp;rsquo;s &lt;a href="http://geekswithblogs.net/theArchitectsNapkin">blog&lt;/a> and his post, &amp;ldquo;&lt;a href="http://geekswithblogs.net/theArchitectsNapkin/archive/2015/07/22/there-is-no-such-thing-as-technical-debt.aspx">There is no such thing as technical debt&lt;/a>&amp;rdquo;. There are many points of view on the subject covered by various people such as &lt;a href="https://sites.google.com/site/unclebobconsultingllc/a-mess-is-not-a-technical-debt">Uncle Bob&lt;/a> and &lt;a href="http://martinfowler.com/bliki/TechnicalDebt.html">Martin Fowler&lt;/a>, but I thought it might be insightful to show how my team manages our code base.&lt;/p></description></item><item><title>Up And Running With Git And Powershell</title><link>https://im5tu.io/article/2015/02/up-and-running-with-git-and-powershell/</link><pubDate>Mon, 23 Feb 2015 18:37:14 +0000</pubDate><guid>https://im5tu.io/article/2015/02/up-and-running-with-git-and-powershell/</guid><description>&lt;p>We&amp;rsquo;ve all experienced a time where we use our pc&amp;rsquo;s for a prolonged period of time, accumulating a ton of crap along the way as we try out various technologies and fads. After a while, the pc begins to do funny things like crash for no apparent reason. This week, I needed to rebuild my dev machine and decided to change from Atlassian&amp;rsquo;s Source Tree over to Powershell and raw git.&lt;/p></description></item><item><title>3 Easy Steps To Configuring Azure With Powershell</title><link>https://im5tu.io/article/2015/02/3-easy-steps-to-configuring-azure-with-powershell/</link><pubDate>Tue, 17 Feb 2015 18:37:00 +0000</pubDate><guid>https://im5tu.io/article/2015/02/3-easy-steps-to-configuring-azure-with-powershell/</guid><description>&lt;p>Recently, I had to automate some tasks in Azure. This is the easiest way I could get started.&lt;/p></description></item><item><title>DevOps</title><link>https://im5tu.io/article/2015/01/devops/</link><pubDate>Sat, 24 Jan 2015 18:36:29 +0000</pubDate><guid>https://im5tu.io/article/2015/01/devops/</guid><description>&lt;p>As part of my role as a .Net Developer, I have recently been getting to grips with the build and deployment features of both Teamcity and Octopus Deploy. This has been making me think about the industry buzz word &amp;ldquo;DevOps&amp;rdquo; and exactly what that means.&lt;/p></description></item><item><title>Dev Lunches: What, Why, How</title><link>https://im5tu.io/article/2014/12/dev-lunches-what-why-how/</link><pubDate>Wed, 17 Dec 2014 18:36:09 +0000</pubDate><guid>https://im5tu.io/article/2014/12/dev-lunches-what-why-how/</guid><description>&lt;p>If you&amp;rsquo;re not up-to-date, you fall behind. You fall behind in your work, which leads you to fall behind at home. If continued, it&amp;rsquo;s a never ending circle that can seem like climbing Everest in order to overcome. I propose that we, as developers, start doing is utilizing our free time to help not only ourselves but our co-workers too. We can do this via dev lunches.&lt;/p></description></item><item><title>Message Queue Fundementals: MSMQ</title><link>https://im5tu.io/article/2014/09/message-queue-fundementals-msmq/</link><pubDate>Sun, 28 Sep 2014 18:35:57 +0000</pubDate><guid>https://im5tu.io/article/2014/09/message-queue-fundementals-msmq/</guid><description>&lt;p>MSMQ is Microsoft&amp;rsquo;s Message Queuing service that can be used to implement both synchronous and asynchronous solutions. Typically solutions are architectured using the available C++ API’s or via the relevant COM objects. The .Net Framework exposes the System.Messaging namespace which contains all the classes that you need to work with the MSMQ API.&lt;/p></description></item><item><title>Message Queue Fundementals: Introduction</title><link>https://im5tu.io/article/2014/09/message-queue-fundementals-introduction/</link><pubDate>Sun, 07 Sep 2014 18:35:37 +0000</pubDate><guid>https://im5tu.io/article/2014/09/message-queue-fundementals-introduction/</guid><description>&lt;p>Message queues are a substantial part of modern day enterprise architectures and a vital part of providing scalable solutions. They are designed for asynchronous communication between different parts of the system. They help scale individual components of a system and increase reliability with the optional addition of the persistence of messages to a storage system.&lt;/p></description></item><item><title>Finding Reducible Expressions</title><link>https://im5tu.io/article/2014/06/finding-reducible-expressions/</link><pubDate>Tue, 24 Jun 2014 09:21:19 +0000</pubDate><guid>https://im5tu.io/article/2014/06/finding-reducible-expressions/</guid><description>&lt;p>Today I just wanted to share a quick note regarding &lt;a href="http://stackoverflow.com/a/2040097/315711">a Stack Overflow answer&lt;/a> that I recently came across. In the answer the author explains that a call to &lt;code>Expression.CanReduce&lt;/code> will typically return false, while &lt;code>Expression.Reduce()&lt;/code> will return the current expression. The author continues to state that one of the types that overrides &lt;code>Expression.Reduce()&lt;/code> and &lt;code>Expression.CanReduce&lt;/code> is &lt;code>MemberInitExpression&lt;/code>.&lt;/p></description></item><item><title>How your binary search implementation is broken and how to fix it</title><link>https://im5tu.io/article/2014/06/how-your-binary-search-implementation-is-broken-and-how-to-fix-it/</link><pubDate>Fri, 20 Jun 2014 18:21:04 +0000</pubDate><guid>https://im5tu.io/article/2014/06/how-your-binary-search-implementation-is-broken-and-how-to-fix-it/</guid><description>&lt;p>I have recently begun studying the theory and implementations of algorithms. During this study, I came across &lt;a href="http://googleresearch.blogspot.co.uk/2006/06/extra-extra-read-all-about-it-nearly.html">this post&lt;/a> which describes how a bug exists in most implementations of a binary search algorithm.&lt;/p></description></item><item><title>Unit Testing Equals The Forgotten Tests</title><link>https://im5tu.io/article/2014/06/unit-testing-equals-the-forgotten-tests/</link><pubDate>Wed, 18 Jun 2014 18:20:25 +0000</pubDate><guid>https://im5tu.io/article/2014/06/unit-testing-equals-the-forgotten-tests/</guid><description>&lt;p>Today I wanted to cover something that is not often covered when unit testing an object. If an object has the &lt;code>Equals&lt;/code> method overridden, then there are a number of tests that we should be running as a minimum:&lt;/p></description></item><item><title>Enabling HTTP Strict Transport Security HSTS via Web Config</title><link>https://im5tu.io/article/2014/06/enabling-http-strict-transport-security-hsts-via-web-config/</link><pubDate>Tue, 10 Jun 2014 18:19:47 +0000</pubDate><guid>https://im5tu.io/article/2014/06/enabling-http-strict-transport-security-hsts-via-web-config/</guid><description>&lt;p>In my previous post, I discussed how to &lt;a href="https://im5tu.io/article/2014/04/enabling-http-strict-transport-security-hsts-via-asp-net-mvc-actionfilters/">enable HSTS via MVC Action Filters&lt;/a>. I thought that I would just do a follow up post showing you how to enable it via the web.config.&lt;/p></description></item><item><title>Enabling HTTP Strict Transport Security HSTS via ASP Net MVC ActionFilters</title><link>https://im5tu.io/article/2014/04/enabling-http-strict-transport-security-hsts-via-asp-net-mvc-actionfilters/</link><pubDate>Mon, 21 Apr 2014 18:19:47 +0000</pubDate><guid>https://im5tu.io/article/2014/04/enabling-http-strict-transport-security-hsts-via-asp-net-mvc-actionfilters/</guid><description>&lt;p>After reading &lt;a href="http://www.troyhunt.com/">Troy Hunt&amp;rsquo;s&lt;/a> free ebook on the &lt;a href="http://www.troyhunt.com/2011/12/free-ebook-owasp-top-10-for-net.html">OWASP Top 10 for .Net Developers&lt;/a>, I discovered an additional mechanism to help developers secure their websites. That mechanism is HTTP Strict Transport Security.&lt;/p></description></item><item><title>SAP Business One V9 Version Strings</title><link>https://im5tu.io/article/2014/03/sap-business-one-v9-version-strings/</link><pubDate>Sat, 15 Mar 2014 13:18:01 +0000</pubDate><guid>https://im5tu.io/article/2014/03/sap-business-one-v9-version-strings/</guid><description>&lt;p>Today I had to figure out what the current version of SAP Business One is. In order to do this, I looked at the table SFMD inside of SBO-Common and found the following results&lt;/p></description></item><item><title>Becoming An MCP</title><link>https://im5tu.io/article/2013/06/becoming-an-mcp/</link><pubDate>Mon, 10 Jun 2013 20:14:39 +0000</pubDate><guid>https://im5tu.io/article/2013/06/becoming-an-mcp/</guid><description>&lt;p>As the title suggests, today I passed the 70-483 Programming in C# exam to offically become a Microsoft Certifed Professional.&lt;/p></description></item><item><title>Using IDisposible correctly</title><link>https://im5tu.io/article/2013/05/using-idisposible-correctly/</link><pubDate>Mon, 06 May 2013 18:09:25 +0000</pubDate><guid>https://im5tu.io/article/2013/05/using-idisposible-correctly/</guid><description>&lt;p>In this article, I am going to show you how to use the &lt;code>IDisposable&lt;/code> interface correctly in your code. When I read others code, it is easy to pick up on subtle bugs. We need to begin to train ourselves to see the bugs and we do this by understanding what we are using. Before we begin, we need to make sure that we understand a core piece of computer science theory: Destructors.&lt;/p></description></item><item><title>Semaphore vs SeamphoreSlim Micro Benchmark</title><link>https://im5tu.io/article/2013/03/semaphore-vs-seamphoreslim-micro-benchmark/</link><pubDate>Mon, 11 Mar 2013 18:06:28 +0000</pubDate><guid>https://im5tu.io/article/2013/03/semaphore-vs-seamphoreslim-micro-benchmark/</guid><description>&lt;p>In this post, I am going to show a small micro-benchmark to demonstrate the performance difference between the &lt;code>Semaphore&lt;/code> and &lt;code>SemaphoreSlim&lt;/code> classes in C#. A &lt;code>Semaphore&lt;/code> is often used to restrict the number of threads than can access some (physical or logical) resource. In this case, we want the restriction to be as little as possible.&lt;/p></description></item><item><title>Flicker free forms and listview in .Net</title><link>https://im5tu.io/article/2012/12/flicker-free-forms-and-listview-in-.net/</link><pubDate>Sun, 30 Dec 2012 14:51:38 +0000</pubDate><guid>https://im5tu.io/article/2012/12/flicker-free-forms-and-listview-in-.net/</guid><description>&lt;p>On a project I have been working on recently, I came across a problem where under Windows an Mdi Child form would flicker when it loads. Trying to find information on what was the cause of this was near impossible. I ended up trying a lot of code snippets that I found when googling the problem and this is what I have come up with.&lt;/p></description></item><item><title>Extension methods in dotnet</title><link>https://im5tu.io/article/2012/12/extension-methods-in-dotnet/</link><pubDate>Sat, 01 Dec 2012 17:51:38 +0000</pubDate><guid>https://im5tu.io/article/2012/12/extension-methods-in-dotnet/</guid><description>&lt;p>In this article we will take a look at what extension methods are and how to use them in .Net. Personally, they are one of the best things that has been introduced into the .Net framework in terms of readability. I will take you through what extension methods are, how to create them (in c# and vb) then I will show you some of the extension methods that I have created (in c# only, conversion is for you to try).&lt;/p></description></item><item><title>Recruiting Me?</title><link>https://im5tu.io/private/recruit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://im5tu.io/private/recruit/</guid><description>If you&amp;rsquo;ve received this link from me, it&amp;rsquo;s because I would like to build a long term professional relationship with you for the future. I hope that this saves a lot of time and helps you understand where my skills lie and what it is I expect in the future.
Before you contact me, I would ask the following because of my experiences in the past with recruiters in general:</description></item></channel></rss>