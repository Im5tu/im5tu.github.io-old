<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS on Stuart Blackler's Blog</title><link>https://im5tu.io/tags/aws/</link><description>Recent content in AWS on Stuart Blackler's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Dec 2020 12:53:17 +0000</lastBuildDate><atom:link href="https://im5tu.io/tags/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>Blending Metrics Using EventCounters In C#</title><link>https://im5tu.io/article/2020/12/blending-metrics-using-eventcounters-in-c/</link><pubDate>Sun, 27 Dec 2020 12:53:17 +0000</pubDate><guid>https://im5tu.io/article/2020/12/blending-metrics-using-eventcounters-in-c/</guid><description>&lt;p>In a world where we use auto-scaling a lot, its often not just one metric that we will take into consideration when deciding whether or not to scale our applications. For example, we might have a combination of CPU usage, memory usage and web request latency. Some services like AWS CloudWatch Metrics only allow scaling based off a single value. Luckily, we can blend metrics together to create new ones, which we can then use in our scaling policies. A blended metric is made up of however one or more existing metrics that you choose, called aspects, and can be published as if it were any other metric, eg: publish to DataDog/Cloudwatch.&lt;/p></description></item><item><title>Publish Metrics to Cloudwatch in .NET Core</title><link>https://im5tu.io/article/2020/12/publish-metrics-to-cloudwatch-in-.net-core/</link><pubDate>Sun, 13 Dec 2020 16:21:58 +0000</pubDate><guid>https://im5tu.io/article/2020/12/publish-metrics-to-cloudwatch-in-.net-core/</guid><description>&lt;p>In a &lt;a href="https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/">previous post&lt;/a> I took a look at how we can utilize .NET event counters to record metrics in our applications. However, I never covered the implementation of how I write the metrics to either CloudWatch or DataDog. In this article, I&amp;rsquo;m going to take a look at how to publish metrics to CloudWatch and one way of integrating it with the aforementioned blog series.&lt;/p></description></item><item><title>Building a Zero Trust Architecture In AWS</title><link>https://im5tu.io/article/2020/12/building-a-zero-trust-architecture-in-aws/</link><pubDate>Sat, 05 Dec 2020 15:38:58 +0000</pubDate><guid>https://im5tu.io/article/2020/12/building-a-zero-trust-architecture-in-aws/</guid><description>&lt;p>In the vast majority of companies that I&amp;rsquo;ve been in, software engineering &amp;amp; infrastructure best practises have often been left as something that needs to be updated later because building the product comes first. This is completely understandable as if you don&amp;rsquo;t have a product, you don&amp;rsquo;t have employment. This presents problems later when companies are beginning to scale rapidly and become popular. Not only does the company becomes a target for malicious actors, but security-related incidents can easily occur by leaving storage devices open accidentally. Once a malicious actor is in your system, you usually have pretty big problems unless you design your architectures with Zero Trust in mind.&lt;/p></description></item></channel></rss>