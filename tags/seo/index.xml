<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Seo on Stuart Blackler&#39;s Blog</title>
    <link>https://im5tu.io/tags/seo/index.xml</link>
    <description>Recent content in Seo on Stuart Blackler&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://im5tu.io/tags/seo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Removing trailing slashes with URL Rewrite</title>
      <link>https://im5tu.io/article/2017/06/removing-trailing-slashes-with-url-rewrite/</link>
      <pubDate>Mon, 05 Jun 2017 15:00:59 +0100</pubDate>
      
      <guid>https://im5tu.io/article/2017/06/removing-trailing-slashes-with-url-rewrite/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;https://im5tu.io/article/2017/06/canonical-host-urls-with-url-rewrite/&#34;&gt;previous post&lt;/a&gt;, I explained why canonical urls are important and how to enforce them . In this article, I will show you how to have a canonical host url.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;why-does-adding-or-removing-trailing-slashes-matter&#34;&gt;Why does adding or removing trailing slashes matter?&lt;/h2&gt;

&lt;p&gt;In essence, it matters for the same reasons as I described in &lt;a href=&#34;https://im5tu.io/article/2017/06/canonical-host-urls-with-url-rewrite/&#34;&gt;my previous post&lt;/a&gt;. That is, search engines will see &lt;code&gt;site.com/post1&lt;/code&gt; as different content to &lt;code&gt;site.com/post1/&lt;/code&gt; so we need to correct this in order to get a bit of SEO benefit. In this article, I will be redirecting any URL that comes with a slash at the end to one without.&lt;/p&gt;

&lt;h2 id=&#34;adding-or-removing-trailing-slashes-via-url-rewrite&#34;&gt;Adding or removing trailing slashes via URL Rewrite&lt;/h2&gt;

&lt;p&gt;As per the snippet in our previous posts, we are going to create an inbound rule (which lives under &lt;code&gt;system.web &amp;gt; rewrite &amp;gt; rules&lt;/code&gt; in our &lt;code&gt;web.config&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;rule name=&amp;quot;Remove trailing slash&amp;quot; stopProcessing=&amp;quot;true&amp;quot;&amp;gt;
    &amp;lt;match url=&amp;quot;(.*)/$&amp;quot; /&amp;gt;
    &amp;lt;conditions logicalGrouping=&amp;quot;MatchAll&amp;quot; trackAllCaptures=&amp;quot;false&amp;quot;&amp;gt;
        &amp;lt;add input=&amp;quot;{REQUEST_FILENAME}&amp;quot; matchType=&amp;quot;IsFile&amp;quot; negate=&amp;quot;true&amp;quot; /&amp;gt;
        &amp;lt;add input=&amp;quot;{REQUEST_FILENAME}&amp;quot; matchType=&amp;quot;IsDirectory&amp;quot; negate=&amp;quot;true&amp;quot; /&amp;gt;
    &amp;lt;/conditions&amp;gt;
    &amp;lt;action type=&amp;quot;Redirect&amp;quot; url=&amp;quot;{R:1}&amp;quot; redirectType=&amp;quot;Temporary&amp;quot; /&amp;gt;
&amp;lt;/rule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the first line, we are defining the name of the rule which can be viewed inside of &lt;code&gt;inetmgr (IIS Manager)&lt;/code&gt; saying that we want to stop at this rule and return the response to the client. Next up, we give our matching criteria which we have wildcarded to match all requests that end with a &lt;code&gt;/&lt;/code&gt;. Then we have added a condition set which is definted to match all criteria inside. We use the server variable &lt;code&gt;{REQUEST_FILENAME}&lt;/code&gt; to determine whether or not the path requested is a physical file or directory on disk. The last attribute in each condition is a negation, which is equivilent of saying don&amp;rsquo;t match a physical directory or file (we don&amp;rsquo;t want to screw the routing for those!).&lt;/p&gt;

&lt;p&gt;Finally, we define the action that we wish to take if both the &lt;code&gt;match&lt;/code&gt; and all the conditions in the &lt;code&gt;conditions&lt;/code&gt; section have been satisfied. The action that we wish to take is to redirect the user to the page without the slash, so we use the request capture group &lt;code&gt;{R:1}&lt;/code&gt; (more on this in a future article).&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it, you should be redirecting people from say &lt;code&gt;site.com/post1/&lt;/code&gt; to &lt;code&gt;site.com/post1&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;other-posts-in-this-series&#34;&gt;Other Posts In This Series&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://im5tu.io/article/2017/06/up-and-running-with-url-rewrite---going-from-http-to-https/&#34;&gt;Up and running with URL Rewrite - going from HTTP to HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://im5tu.io/article/2017/06/canonical-host-urls-with-url-rewrite/&#34;&gt;Canonical host urls with URL Rewrite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://im5tu.io/article/2017/06/removing-trailing-slashes-with-url-rewrite/&#34;&gt;Removing trailing slashes with URL Rewrite&lt;/a&gt; &lt;em&gt;(This Post)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://im5tu.io/article/2017/06/ensuring-httponly-cookies-with-url-rewrite/&#34;&gt;Ensuring httpOnly cookies with URL Rewrite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://im5tu.io/article/2017/06/ensuring-secure-cookies-with-url-rewrite/&#34;&gt;Ensuring secure cookies with URL Rewrite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://im5tu.io/article/2017/06/ensuring-samesite-cookies-with-url-rewrite/&#34;&gt;Ensuring samesite cookies with URL Rewrite&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Canonical host urls with URL Rewrite</title>
      <link>https://im5tu.io/article/2017/06/canonical-host-urls-with-url-rewrite/</link>
      <pubDate>Sun, 04 Jun 2017 15:00:55 +0100</pubDate>
      
      <guid>https://im5tu.io/article/2017/06/canonical-host-urls-with-url-rewrite/</guid>
      <description>

&lt;p&gt;In the &lt;a href=&#34;https://im5tu.io/article/2017/06/up-and-running-with-url-rewrite---going-from-http-to-https/&#34;&gt;previous post&lt;/a&gt;, I gave a brief intoduction to URL Rewriting and showed you how to get from HTTP to HTTPS. In this article, I will show you how to have a canonical host url.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;what-is-a-canonical-host-url&#34;&gt;What is a canonical host url?&lt;/h2&gt;

&lt;p&gt;It can be incredibly easy to distribute different urls for your website. Lets say that we have &lt;code&gt;www.site.com/post1&lt;/code&gt; and &lt;code&gt;site.com/post1&lt;/code&gt;. If you&amp;rsquo;re a search engine, you think that these are different different pages with the same content. When you have the same content, you ranking decreases because the content is not original. As a human looking at the site, we think that the pages are the same content on the same site, so we don&amp;rsquo;t see the duplication.&lt;/p&gt;

&lt;p&gt;So a canonical url is basically saying to the search engine: hey, &lt;code&gt;www.site.com/post1&lt;/code&gt; and &lt;code&gt;site.com/post1&lt;/code&gt; are the same content and you should access me through this link (&lt;em&gt;which we define to be a single one of the above&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;We can set this through metadata on our webpages, but this doesn&amp;rsquo;t guarentee that people will distribute the correct link to your site. To fix this, we can rewrite the url to either append or remove the &lt;code&gt;www.&lt;/code&gt;. In this case, because I prefer shorter url&amp;rsquo;s, we will remove the www sub-domain prefix.&lt;/p&gt;

&lt;h2 id=&#34;making-a-canonical-host-url-via-url-rewrite&#34;&gt;Making a canonical host url via URL Rewrite&lt;/h2&gt;

&lt;p&gt;As per the snippet in our previous post, we are going to create an inbound rule (which lives under &lt;code&gt;system.web &amp;gt; rewrite &amp;gt; rules&lt;/code&gt; in our &lt;code&gt;web.config&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;rule name=&amp;quot;Canonical Hostname&amp;quot; stopProcessing=&amp;quot;true&amp;quot;&amp;gt;
    &amp;lt;match url=&amp;quot;(.*)&amp;quot; /&amp;gt;
    &amp;lt;conditions logicalGrouping=&amp;quot;MatchAll&amp;quot; trackAllCaptures=&amp;quot;false&amp;quot;&amp;gt;
        &amp;lt;add input=&amp;quot;{HTTP_HOST}&amp;quot; pattern=&amp;quot;^www\.([.a-zA-Z0-9]+)$&amp;quot;/&amp;gt;
    &amp;lt;/conditions&amp;gt;
    &amp;lt;action type=&amp;quot;Redirect&amp;quot; url=&amp;quot;https://{C:1}/{R:1}&amp;quot; redirectType=&amp;quot;Temporary&amp;quot; /&amp;gt;
&amp;lt;/rule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the first line, we are defining the name of the rule which can be viewed inside of &lt;code&gt;inetmgr (IIS Manager)&lt;/code&gt; saying that we want to stop at this rule and return the response to the client. Next up, we give our matching criteria which we have wildcarded to match all requests. Then we have added a condition which takes a server variable (&lt;code&gt;{HTTP_HOST}&lt;/code&gt; which tells us the DNS name or IP address that has been used to reach this server eg: site.com or www.site.com), and we&amp;rsquo;ve matched it against any request starting with &lt;code&gt;www.&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we define the action that we wish to take if both the &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;conditions&lt;/code&gt; sections have been satisfied. The action that we wish to take is to redirect the user to a non &lt;code&gt;www.&lt;/code&gt; version of the page. In order to do this, we use one of the capture groups (which comes from the conditions section regex) to redirect to (in this case it&amp;rsquo;s &lt;code&gt;{C:1}&lt;/code&gt;) and combine it with the original path and query.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it, you should be redirecting people from say &lt;code&gt;www.site.com&lt;/code&gt; to &lt;code&gt;site.com&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;other-posts-in-this-series&#34;&gt;Other Posts In This Series&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://im5tu.io/article/2017/06/up-and-running-with-url-rewrite---going-from-http-to-https/&#34;&gt;Up and running with URL Rewrite - going from HTTP to HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://im5tu.io/article/2017/06/canonical-host-urls-with-url-rewrite/&#34;&gt;Canonical host urls with URL Rewrite&lt;/a&gt; &lt;em&gt;(This Post)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://im5tu.io/article/2017/06/removing-trailing-slashes-with-url-rewrite/&#34;&gt;Removing trailing slashes with URL Rewrite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://im5tu.io/article/2017/06/ensuring-httponly-cookies-with-url-rewrite/&#34;&gt;Ensuring httpOnly cookies with URL Rewrite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://im5tu.io/article/2017/06/ensuring-secure-cookies-with-url-rewrite/&#34;&gt;Ensuring secure cookies with URL Rewrite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://im5tu.io/article/2017/06/ensuring-samesite-cookies-with-url-rewrite/&#34;&gt;Ensuring samesite cookies with URL Rewrite&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>