<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>csharp on Stuart Blackler's Blog</title><link>https://im5tu.io/tags/csharp/</link><description>Recent content in csharp on Stuart Blackler's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 11 Feb 2017 12:15:27 +0000</lastBuildDate><atom:link href="https://im5tu.io/tags/csharp/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenMessage 2017 Roadmap</title><link>https://im5tu.io/article/2017/02/openmessage-2017-roadmap/</link><pubDate>Sat, 11 Feb 2017 12:15:27 +0000</pubDate><guid>https://im5tu.io/article/2017/02/openmessage-2017-roadmap/</guid><description>&lt;p>&lt;a href="https://github.com/im5tu/openmessage">OpenMessage&lt;/a> originally started out as a replacement for an internal library that was used across teams. At the time, the team I was apart of needed the latest version of dotnet core for the library where as the other team were stuck on RC1. They were also developing features for that version of the framework and a few pre-existing details that we were unhappy with (eg: the request/response implementation). With that in mind, I created a minimal wrapper for what we needed. Looking forward, I plan to dedicate a bit more time to the project and improve it.&lt;/p></description></item><item><title>OpenMessage 1.1 Released</title><link>https://im5tu.io/article/2017/02/openmessage-1.1-released/</link><pubDate>Sun, 05 Feb 2017 15:31:54 +0000</pubDate><guid>https://im5tu.io/article/2017/02/openmessage-1.1-released/</guid><description>&lt;p>Just a quick update to say that the Azure provider for &lt;a href="https://github.com/Im5tu/OpenMessage">OpenMessage&lt;/a> has been released. This update fixes an issue with scheduling messages on topics.&lt;/p></description></item><item><title>Message Queue Fundementals: MSMQ</title><link>https://im5tu.io/article/2014/09/message-queue-fundementals-msmq/</link><pubDate>Sun, 28 Sep 2014 18:35:57 +0000</pubDate><guid>https://im5tu.io/article/2014/09/message-queue-fundementals-msmq/</guid><description>&lt;p>MSMQ is Microsoft's Message Queuing service that can be used to implement both synchronous and asynchronous solutions. Typically solutions are architectured using the available C++ APIâ€™s or via the relevant COM objects. The .Net Framework exposes the System.Messaging namespace which contains all the classes that you need to work with the MSMQ API.&lt;/p></description></item><item><title>Finding Reducible Expressions</title><link>https://im5tu.io/article/2014/06/finding-reducible-expressions/</link><pubDate>Tue, 24 Jun 2014 09:21:19 +0000</pubDate><guid>https://im5tu.io/article/2014/06/finding-reducible-expressions/</guid><description>&lt;p>Today I just wanted to share a quick note regarding &lt;a href="http://stackoverflow.com/a/2040097/315711">a Stack Overflow answer&lt;/a> that I recently came across. In the answer the author explains that a call to &lt;code>Expression.CanReduce&lt;/code> will typically return false, while &lt;code>Expression.Reduce()&lt;/code> will return the current expression. The author continues to state that one of the types that overrides &lt;code>Expression.Reduce()&lt;/code> and &lt;code>Expression.CanReduce&lt;/code> is &lt;code>MemberInitExpression&lt;/code>.&lt;/p></description></item><item><title>How your binary search implementation is broken and how to fix it</title><link>https://im5tu.io/article/2014/06/how-your-binary-search-implementation-is-broken-and-how-to-fix-it/</link><pubDate>Fri, 20 Jun 2014 18:21:04 +0000</pubDate><guid>https://im5tu.io/article/2014/06/how-your-binary-search-implementation-is-broken-and-how-to-fix-it/</guid><description>&lt;p>I have recently begun studying the theory and implementations of algorithms. During this study, I came across &lt;a href="http://googleresearch.blogspot.co.uk/2006/06/extra-extra-read-all-about-it-nearly.html">this post&lt;/a> which describes how a bug exists in most implementations of a binary search algorithm.&lt;/p></description></item><item><title>Unit Testing Equals The Forgotten Tests</title><link>https://im5tu.io/article/2014/06/unit-testing-equals-the-forgotten-tests/</link><pubDate>Wed, 18 Jun 2014 18:20:25 +0000</pubDate><guid>https://im5tu.io/article/2014/06/unit-testing-equals-the-forgotten-tests/</guid><description>&lt;p>Today I wanted to cover something that is not often covered when unit testing an object. If an object has the &lt;code>Equals&lt;/code> method overridden, then there are a number of tests that we should be running as a minimum:&lt;/p></description></item><item><title>Enabling HTTP Strict Transport Security HSTS via Web Config</title><link>https://im5tu.io/article/2014/06/enabling-http-strict-transport-security-hsts-via-web-config/</link><pubDate>Tue, 10 Jun 2014 18:19:47 +0000</pubDate><guid>https://im5tu.io/article/2014/06/enabling-http-strict-transport-security-hsts-via-web-config/</guid><description>&lt;p>In my previous post, I discussed how to &lt;a href="https://im5tu.io/article/2014/04/enabling-http-strict-transport-security-hsts-via-asp-net-mvc-actionfilters/">enable HSTS via MVC Action Filters&lt;/a>. I thought that I would just do a follow up post showing you how to enable it via the web.config.&lt;/p></description></item><item><title>Enabling HTTP Strict Transport Security HSTS via ASP Net MVC ActionFilters</title><link>https://im5tu.io/article/2014/04/enabling-http-strict-transport-security-hsts-via-asp-net-mvc-actionfilters/</link><pubDate>Mon, 21 Apr 2014 18:19:47 +0000</pubDate><guid>https://im5tu.io/article/2014/04/enabling-http-strict-transport-security-hsts-via-asp-net-mvc-actionfilters/</guid><description>&lt;p>After reading &lt;a href="http://www.troyhunt.com/">Troy Hunt's&lt;/a> free ebook on the &lt;a href="http://www.troyhunt.com/2011/12/free-ebook-owasp-top-10-for-net.html">OWASP Top 10 for .Net Developers&lt;/a>, I discovered an additional mechanism to help developers secure their websites. That mechanism is HTTP Strict Transport Security.&lt;/p></description></item><item><title>Becoming An MCP</title><link>https://im5tu.io/article/2013/06/becoming-an-mcp/</link><pubDate>Mon, 10 Jun 2013 20:14:39 +0000</pubDate><guid>https://im5tu.io/article/2013/06/becoming-an-mcp/</guid><description>&lt;p>As the title suggests, today I passed the 70-483 Programming in C# exam to offically become a Microsoft Certifed Professional.&lt;/p></description></item><item><title>Using IDisposible correctly</title><link>https://im5tu.io/article/2013/05/using-idisposible-correctly/</link><pubDate>Mon, 06 May 2013 18:09:25 +0000</pubDate><guid>https://im5tu.io/article/2013/05/using-idisposible-correctly/</guid><description>&lt;p>In this article, I am going to show you how to use the &lt;code>IDisposable&lt;/code> interface correctly in your code. When I read others code, it is easy to pick up on subtle bugs. We need to begin to train ourselves to see the bugs and we do this by understanding what we are using. Before we begin, we need to make sure that we understand a core piece of computer science theory: Destructors.&lt;/p></description></item><item><title>Semaphore vs SeamphoreSlim Micro Benchmark</title><link>https://im5tu.io/article/2013/03/semaphore-vs-seamphoreslim-micro-benchmark/</link><pubDate>Mon, 11 Mar 2013 18:06:28 +0000</pubDate><guid>https://im5tu.io/article/2013/03/semaphore-vs-seamphoreslim-micro-benchmark/</guid><description>&lt;p>In this post, I am going to show a small micro-benchmark to demonstrate the performance difference between the &lt;code>Semaphore&lt;/code> and &lt;code>SemaphoreSlim&lt;/code> classes in C#. A &lt;code>Semaphore&lt;/code> is often used to restrict the number of threads than can access some (physical or logical) resource. In this case, we want the restriction to be as little as possible.&lt;/p></description></item><item><title>Extension methods in dotnet</title><link>https://im5tu.io/article/2012/12/extension-methods-in-dotnet/</link><pubDate>Sat, 01 Dec 2012 17:51:38 +0000</pubDate><guid>https://im5tu.io/article/2012/12/extension-methods-in-dotnet/</guid><description>&lt;p>In this article we will take a look at what extension methods are and how to use them in .Net. Personally, they are one of the best things that has been introduced into the .Net framework in terms of readability. I will take you through what extension methods are, how to create them (in c# and vb) then I will show you some of the extension methods that I have created (in c# only, conversion is for you to try).&lt;/p></description></item></channel></rss>