<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Csharp on Stuart Blackler&#39;s Blog</title>
    <link>https://im5tu.io/tags/csharp/index.xml</link>
    <description>Recent content in Csharp on Stuart Blackler&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://im5tu.io/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>OpenMessage 2017 Roadmap</title>
      <link>https://im5tu.io/article/2017/02/openmessage-2017-roadmap/</link>
      <pubDate>Sat, 11 Feb 2017 12:15:27 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2017/02/openmessage-2017-roadmap/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/im5tu/openmessage&#34;&gt;OpenMessage&lt;/a&gt; originally started out as a replacement for an internal library that was used across teams. At the time, the team I was apart of needed the latest version of dotnet core for the library where as the other team were stuck on RC1. They were also developing features for that version of the framework and a few pre-existing details that we were unhappy with (eg: the request/response implementation). With that in mind, I created a minimal wrapper for what we needed. Looking forward, I plan to dedicate a bit more time to the project and improve it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;support-for-web-hook-scenarios&#34;&gt;Support for web hook scenarios&lt;/h2&gt;

&lt;p&gt;This is probably one of the bigger ideas that I have had in mind for the last month or so purely for the power that it could bring to applications. One of the core parts of our infrastructure was taking a web request generated by an external system and translating this into a message to be placed on Azure Service Bus. I see two main parts to this functionality:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Support for incomming web hooks&lt;/li&gt;
&lt;li&gt;Support for sending web hooks&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For each portion, the framework will need to consider whether or not to send/receive to/from unique endpoints or an endpoint per message. Initially, this will be decided at composition, but may be extended to dynamic re-configuration at a later stage (which will need to be considered throughout the framework). I intend to use some lightweight routing to do this, probably using the routing module from ASP.Net core, at least, initialy.&lt;/p&gt;

&lt;h2 id=&#34;support-for-additional-providers&#34;&gt;Support for additional providers&lt;/h2&gt;

&lt;p&gt;The more providers that the project has, the more flexibility you can have inside of your applications. The main providers that I have in mind are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Azure Event Hubs&lt;/li&gt;
&lt;li&gt;Service Fabric Reliable Queues&lt;/li&gt;
&lt;li&gt;Rabbit MQ&lt;/li&gt;
&lt;li&gt;In Memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There isn&amp;rsquo;t really too much to say about each of the above, except that the project will have support for each framework using the native providers. I did toy with the idea of building a complete AMQP library as part of this, but that seems a little overkill for the time being. I&amp;rsquo;ll see how the progression of libraries moving to dotnet core takes shape as another full library is quiet the undertaking.&lt;/p&gt;

&lt;h2 id=&#34;sample-creation-tutorial-series&#34;&gt;Sample creation/tutorial series&lt;/h2&gt;

&lt;p&gt;One of the big pieces that is missing at the moment are public samples of how to use the project in your application. This will help ease the onboarding process for new users/developers.&lt;/p&gt;

&lt;p&gt;Naturally, as part of all of this work, the dependencies will be kept up-to-date &amp;amp; bugs fixed. If there is something that you&amp;rsquo;d like to see, create an issue on &lt;a href=&#34;https://github.com/im5tu/openmessage&#34;&gt;github&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/im5tu&#34;&gt;tweet me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Messaging!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenMessage 1.1 Released</title>
      <link>https://im5tu.io/article/2017/02/openmessage-1.1-released/</link>
      <pubDate>Sun, 05 Feb 2017 15:31:54 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2017/02/openmessage-1.1-released/</guid>
      <description>&lt;p&gt;Just a quick update to say that the Azure provider for &lt;a href=&#34;https://github.com/Im5tu/OpenMessage&#34;&gt;OpenMessage&lt;/a&gt; has been released. This update fixes an issue with scheduling messages on topics.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;As part of this update, the entire solution has been converted to the new (old) csproj system as part of Visual Studio 2017. Over the next few days i&amp;rsquo;ll be posting the roadmap for the project and where I plan to take it next. Feedback and ideas are welcome.&lt;/p&gt;

&lt;p&gt;If you experience any problems, let me know.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Message Queue Fundementals: MSMQ</title>
      <link>https://im5tu.io/article/2014/09/message-queue-fundementals-msmq/</link>
      <pubDate>Sun, 28 Sep 2014 18:35:57 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2014/09/message-queue-fundementals-msmq/</guid>
      <description>&lt;p&gt;MSMQ is Microsoft&amp;rsquo;s Message Queuing service that can be used to implement both synchronous and asynchronous solutions. Typically solutions are architectured using the available C++ APIâ€™s or via the relevant COM objects. The .Net Framework exposes the System.Messaging namespace which contains all the classes that you need to work with the MSMQ API. &lt;/p&gt;

&lt;p&gt;If you would like to read the first part to the article, &lt;a href=&#34;http://sblackler.net/2014/09/07/Message-Queue-Fundementals-Introduction/&#34;&gt;click here to read about Message Queue Fundamentals&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article I will cover the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Types of Queues in MSMQ

&lt;ul&gt;
&lt;li&gt;Application Queues

&lt;ul&gt;
&lt;li&gt;Public/Private Queues&lt;/li&gt;
&lt;li&gt;Transactional and non-transactional Queues&lt;/li&gt;
&lt;li&gt;Sub-Queues&lt;/li&gt;
&lt;li&gt;Administration Queues&lt;/li&gt;
&lt;li&gt;Response Queues&lt;/li&gt;
&lt;li&gt;Report Queues&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;System Queues

&lt;ul&gt;
&lt;li&gt;Journal Queues&lt;/li&gt;
&lt;li&gt;Internal Private Queues&lt;/li&gt;
&lt;li&gt;Dead-letter Queues&lt;/li&gt;
&lt;li&gt;Connector Queues&lt;/li&gt;
&lt;li&gt;Outgoing Queues&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Creating an MSMQ Message Queue&lt;/li&gt;
&lt;li&gt;Accessing an MSMQ Message Queue&lt;/li&gt;
&lt;li&gt;Sending a message to a MSMQ Message Queue

&lt;ul&gt;
&lt;li&gt;Sending a message to a MSMQ Message Queue using transactions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Retrieving a message from a MSMQ Message Queue

&lt;ul&gt;
&lt;li&gt;Retrieving a message from a MSMQ Message Queue using transactions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Before you begin, you need to have MSMQ installed on your machine, please do this by following &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa967729(v=vs.110).aspx&#34;&gt;these instructions&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;types-of-queues-in-msmq&#34;&gt;Types of Queues in MSMQ&lt;/h2&gt;

&lt;p&gt;This section describes the available queue types within MSMQ. Although I will not cover the consumption of all the available types of queue, I will briefly describe the following type of queue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application Queues

&lt;ul&gt;
&lt;li&gt;Public/Private Queues&lt;/li&gt;
&lt;li&gt;Transactional and non-transactional Queues&lt;/li&gt;
&lt;li&gt;Sub-Queues&lt;/li&gt;
&lt;li&gt;Administration Queues&lt;/li&gt;
&lt;li&gt;Response Queues&lt;/li&gt;
&lt;li&gt;Report Queues&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;System Queues

&lt;ul&gt;
&lt;li&gt;Journal Queues&lt;/li&gt;
&lt;li&gt;Internal Private Queues&lt;/li&gt;
&lt;li&gt;Dead-letter Queues&lt;/li&gt;
&lt;li&gt;Connector Queues&lt;/li&gt;
&lt;li&gt;Outgoing Queues&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The quintessential difference between application and system queues is the ability to address messages to the queue. With application queues you can have, essentially, read/write capabilities, whereas you can only read messages from a system queue.&lt;/p&gt;

&lt;h3 id=&#34;administration-queues&#34;&gt;Administration Queues&lt;/h3&gt;

&lt;h4 id=&#34;private-vs-public-queues&#34;&gt;Private vs Public Queues&lt;/h4&gt;

&lt;p&gt;Deciding between a public and private queue depends on the requirements of the application and the infrastructure available. Public queues use Active Directory Domain Services to replicate the queue through the domain forest, providing reliability. They are both persistent and available to other applications. In contrast, private queues are only displayed on the local computer that contains them. Because private queues involve no replication, they are quicker to create, have lower latency and has no replication overhead as they are not distributed through a domain forest.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For further on the permissions required for a public queue, please see &lt;a href=&#34;http://technet.microsoft.com/en-us/library/cc772532.aspx&#34;&gt;this Technet article&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;transactional-vs-non-transactional-queues&#34;&gt;Transactional vs Non-Transactional Queues&lt;/h4&gt;

&lt;p&gt;As the name suggests, a transactional queue that only contains transactional messages. That is, when a message is written to/read from the queue the server/client must confirm the receipt of the message before the message can be removed from/added to the message queue. In contrast, a non-transactional queue each message is sent as a single operation (regardless of how many destinations the message is sent to), so there are no guarantees that messages will reach their destination. This is similar to TCP vs UDP. TCP (Transactional) guarantees message delivery where as UDP (Non-transactional) does not.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For more information on transactional and non-transactional messaging, please see &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms704006(v=vs.85).aspx&#34;&gt;this MSDN article&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;sub-queues&#34;&gt;Sub-Queues&lt;/h4&gt;

&lt;p&gt;Sub-Queues are useful for a variety of scenarios including work order processing and poison message handling. Work order processing is the process in which line items are ordered in a more efficient manner for processing. Poison message handling involves dealing with messages that have exceeded the send timeout; hit the retry limit; or any application specific error such as a transaction timeout. For a more detailed explanation of poison messages, I would suggest reading the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms789028(v=vs.110).aspx&#34;&gt;Poison Message Handling article on MSDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unlike normal queues, the act of passing a message to a sub-queue invokes the creation of the queue if it does not already exist. If the sub-queue exists, the message is passed into the queue as normal. Furthermore, when the queue is empty and there are no open handles to the sub-queue, MSMQ removes the queue on your behalf. Apart from these main differences, sub-queues share the same properties as their parent queue, eg:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quota&lt;/li&gt;
&lt;li&gt;Access Control List (ACL)&lt;/li&gt;
&lt;li&gt;Transactional Type&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;administration-queues-1&#34;&gt;Administration Queues&lt;/h4&gt;

&lt;p&gt;Typically, you would not be accessing administration queues as they are application-generated for the purpose of positive/negative message acknowledgement. Although any non-transactional queue can be defined as an administration queue, I will not be covering this type of queue any further.&lt;/p&gt;

&lt;h4 id=&#34;response-queues&#34;&gt;Response Queues&lt;/h4&gt;

&lt;p&gt;Like administration queues, response queues are application generated that store application generated response messages returned by an application that is reading messages. Unlike administration queues however, any available queue can be specified as a response queue. Since MSMQ has no control over the contents of a message in a response queue, it is up to the receiving application to understand and process the message correctly.&lt;/p&gt;

&lt;h4 id=&#34;report-queues&#34;&gt;Report Queues&lt;/h4&gt;

&lt;p&gt;Each computer that has MSMQ installed can have a single report queue created on it. This is an application-generated queue that is used to store report messages that detail the route that the message took in order to reach its destination. The queue must have the following label and queue type identifier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Label: MQReport Queue&lt;/li&gt;
&lt;li&gt;Queue type identified: &lt;code&gt;{55EE8F32-CCE9-11CF-B108-0020AFD61CE9}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A report queue can either be created through Active Directory Users and Computers, or programmatically if the correct label and queue type identifier has been specified.&lt;/p&gt;

&lt;h3 id=&#34;system-queues&#34;&gt;System Queues&lt;/h3&gt;

&lt;h4 id=&#34;journal-queues&#34;&gt;Journal Queues&lt;/h4&gt;

&lt;p&gt;A journal queue is presented in two forms: A Queue Journal &amp;amp; A Computer Journal. A queue journal details all of the messages that have been removed from a queue. A computer journal contains copies of all the messages that are sent from a computer. Typically, you would use these queues for message diagnosis and audit purposes only.&lt;/p&gt;

&lt;h4 id=&#34;internal-private-queues&#34;&gt;Internal Private Queues&lt;/h4&gt;

&lt;p&gt;Internal queues are at the core of MSMQ. They are used as interim queues for storing and forwarding messages to a destination queue. They are not published in AD DS and are local to the current computer.&lt;/p&gt;

&lt;h4 id=&#34;dead-letter-queues&#34;&gt;Dead-Letter Queues&lt;/h4&gt;

&lt;p&gt;Dead-letter queues contain messages that cannot be delivered. MSMQ provides a transactional dead-letter queue and a non-transactional dead-letter queue. The process of storing undelivered messages on a source computer is sometimes referred to as negative source journalling. Applications can only read or delete messages from a dead letter queue. Sending to the queue is handled by the MSMQ internals.&lt;/p&gt;

&lt;h4 id=&#34;connector-queues&#34;&gt;Connector Queues&lt;/h4&gt;

&lt;p&gt;Simply put, Connector queues are used for cross-platform messaging. For a detailed guide on how this works, refer to the documentation &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms706915(v=vs.85).aspx&#34;&gt;on MSDN&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;outgoing-queues&#34;&gt;Outgoing Queues&lt;/h4&gt;

&lt;p&gt;Outgoing queues are local internal queues that are used to store messages sent to remote queues. Messages can be stored in outgoing queues under off-line conditions and then sent to target queues on remote computers when connectivity is restored. These queues are generated automatically and cannot be created or deleted manually.&lt;/p&gt;

&lt;h2 id=&#34;creating-an-msmq-message-queue&#34;&gt;Creating an MSMQ Message Queue&lt;/h2&gt;

&lt;p&gt;After you have installed MSMQ, you  can access the control panel for MSMQ by opening &lt;code&gt;Computer Management &amp;gt; Services and Applications &amp;gt; Message Queuing&lt;/code&gt;. From here you can see the four types of queue available within MSMQ as well as the MSMQ triggers (if you installed the triggers):&lt;/p&gt;

&lt;h2 id=&#34;accessing-an-msmq-message-queue&#34;&gt;Accessing an MSMQ Message Queue&lt;/h2&gt;

&lt;p&gt;In order to access a message queue, you need to add a reference &lt;code&gt;System.Messaging&lt;/code&gt;. This will provide you access to the &lt;code&gt;MessageQueue&lt;/code&gt; class. If you know the path, format name or label you can use &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ch1d814t(v=vs.110).aspx&#34;&gt;the following constructor overload&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var mq = new MessageQueue(pathOrFormatOrLabel);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The path name can be in the following &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms706083(v=vs.85).aspx&#34;&gt;syntax&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var mq = new MessageQueue(@&amp;quot;ComputerName\QueueName&amp;quot;);
var mq = new MessageQueue(@&amp;quot;ComputerName\PRIVATE$\QueueName&amp;quot;);
var mq = new MessageQueue(@&amp;quot;.\QueueName&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The period shown in the last example is a common computer representation of the local computer.&lt;/p&gt;

&lt;p&gt;In order to reference a queue by its label, the string must start with &lt;code&gt;Label:&lt;/code&gt; followed by the name of the queue. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var mq = new MessageQueue(&amp;quot;Label:TestQueue&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, accessing a queue via its GUID requires the following format `FormatName:Modifier=GUID&amp;rdquo;, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var mq = new MessageQueue(&amp;quot;FormatName:Public=5A5F7535-AE9A-41d4-935C-845C2AFF7112&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dead letter queues, computer journals and queue journals can all be monitored by using the following paths:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var mq = new MessageQueue(@&amp;quot;.\DeadLetter$&amp;quot;); // Non-transactional Dead Letter Queue
var mq = new MessageQueue(@&amp;quot;.\XactDeadLetter$&amp;quot;); // Transactional Dead Letter Queue 
var mq = new MessageQueue(@&amp;quot;.\Journal$&amp;quot;); // Computer Journal
var mq = new MessageQueue(@&amp;quot;.\TestQueue\Journal$&amp;quot;); // Queue Journal                
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sending-a-message-to-an-msmq-message-queue&#34;&gt;Sending a message to an MSMQ Message Queue&lt;/h2&gt;

&lt;p&gt;In order to send a message to a message queue, you need to know how to access the queue as described above. Next you need to create an instance of the &lt;code&gt;MessageQueue&lt;/code&gt; class using one of the following &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/System.Messaging.MessageQueue.MessageQueue(v=vs.110).aspx&#34;&gt;MessageQueue constructors&lt;/a&gt;. The &lt;code&gt;MessageQueue&lt;/code&gt; class inherits from Component, which implements &lt;code&gt;IDisposable&lt;/code&gt;, allowing us to cleanly free the resources of the queue by using a &lt;code&gt;using&lt;/code&gt; statement:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using(var mq = new MessageQueue(&amp;quot;.\TestQueue&amp;quot;))
{
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the queue has been created, we should check that we can write to the queue by using the &lt;code&gt;CanWrite&lt;/code&gt; property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using(var mq = new MessageQueue(&amp;quot;.\TestQueue&amp;quot;))
{
    if(mq.CanWrite)
    {
    }
    else
    {
        // we cannot write to the queue
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can create an instance of the &lt;code&gt;Message&lt;/code&gt; class and call the &lt;code&gt;Send&lt;/code&gt; method on the message queue to send our message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using(var mq = new MessageQueue(&amp;quot;.\TestQueue&amp;quot;))
{
    if(mq.CanWrite)
    {
        var msg = new Message(&amp;quot;Hello world&amp;quot;);
        mq.Send(msg);           
    }
    else
    {
        // we cannot write to the queue
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sending-a-message-to-an-msmq-message-queue-using-transactions&#34;&gt;Sending a message to an MSMQ Message Queue using transactions&lt;/h3&gt;

&lt;p&gt;Sometimes we will be required to send messages to a transactional queue. We can extend our previous example to include a check on the &lt;code&gt;Transactional&lt;/code&gt; property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using(var mq = new MessageQueue(&amp;quot;.\TestQueue&amp;quot;))
{
    if(mq.CanWrite)
    {
        var msg = new Message(&amp;quot;Hello world&amp;quot;);
        if(mq.Transactional)
        {
        }
        else
        {   
            mq.Send(msg);
        }                       
    }
    else
    {
        // we cannot write to the queue
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I have branched out the original code into the else branch to compare. Next, we should construct a &lt;code&gt;MessageQueueTransaction&lt;/code&gt; object which in turn can be passed to the &lt;code&gt;Send&lt;/code&gt; method. Before we call the &lt;code&gt;Send&lt;/code&gt; method, we need to ensure that we have called the &lt;code&gt;Begin&lt;/code&gt; method on the transaction object, and &lt;code&gt;Commit&lt;/code&gt; when we have completed. This will ensure that MSMQ will use the correct transactional semantics:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using(var mq = new MessageQueue(&amp;quot;.\TestQueue&amp;quot;))
{
    if(mq.CanWrite)
    {
        var msg = new Message(&amp;quot;Hello world&amp;quot;);
        if(mq.Transactional)
        {
            var transaction = new MessageQueueTransaction();
            transaction.Begin();
            mq.Send(msg, transaction);
            transaction.Commit();
        }
        else
        {   
            mq.Send(msg);
        }                       
    }
    else
    {
        // we cannot write to the queue
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;retrieving-a-message-from-an-msmq-message-queue&#34;&gt;Retrieving a message from an MSMQ Message Queue&lt;/h2&gt;

&lt;p&gt;In order to retrieve a message from a message queue, you need to know how to access the queue as described above. Next you need to create an instance of the &lt;code&gt;MessageQueue&lt;/code&gt; class using one of the following &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/System.Messaging.MessageQueue.MessageQueue(v=vs.110).aspx&#34;&gt;MessageQueue constructors&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using(var mq = new MessageQueue(&amp;quot;.\TestQueue&amp;quot;))
{    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the queue has been created, we should check that we can read from the queue by using the &lt;code&gt;CanRead&lt;/code&gt; property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using(var mq = new MessageQueue(&amp;quot;.\TestQueue&amp;quot;))
{
    if(mq.CanRead)
    {
    }
    else
    {
        // we can not receive from the queue
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From here, it is a case of calling the &lt;code&gt;Receive&lt;/code&gt; method and processing the result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using(var mq = new MessageQueue(&amp;quot;.\TestQueue&amp;quot;))
{
    if(mq.CanRead)
    {
        var msg = mq.Receive();
        // do something with the received message
    }
    else
    {
        // we can not receive from the queue
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;You may have to set the &lt;code&gt;Formatter&lt;/code&gt; property as shown &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/y918yfy2(v=vs.110).aspx&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;retrieving-a-message-from-an-msmq-message-queue-using-transactions&#34;&gt;Retrieving a message from an MSMQ Message Queue using transactions&lt;/h3&gt;

&lt;p&gt;Similarly to the transactional code we used when sending a message, we can inspect the &lt;code&gt;Transactional&lt;/code&gt; property on the &lt;code&gt;MessageQueue&lt;/code&gt; before creating a &lt;code&gt;MessageQueueTransaction&lt;/code&gt; object, passing it to the &lt;code&gt;Receive&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using(var mq = new MessageQueue(&amp;quot;.\TestQueue&amp;quot;))
{
    if(mq.CanRead)
    {
        if(mq.Transactional)
        {
            var transaction = new MessageQueueTransaction();
            transaction.Begin();
            mq.Receive(transaction);
            transaction.Commit();               
        }
        else
        {
            var msg = mq.Receive();
            // do something with the received message
        }
    }
    else
    {
        // we can not receive from the queue
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Finding Reducible Expressions</title>
      <link>https://im5tu.io/article/2014/06/finding-reducible-expressions/</link>
      <pubDate>Tue, 24 Jun 2014 09:21:19 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2014/06/finding-reducible-expressions/</guid>
      <description>&lt;p&gt;Today I just wanted to share a quick note regarding &lt;a href=&#34;http://stackoverflow.com/a/2040097/315711&#34;&gt;a Stack Overflow answer&lt;/a&gt; that I recently came across. In the answer the author explains that a call to &lt;code&gt;Expression.CanReduce&lt;/code&gt; will typically return false, while &lt;code&gt;Expression.Reduce()&lt;/code&gt; will return the current expression. The author continues to state that one of the types that overrides &lt;code&gt;Expression.Reduce()&lt;/code&gt; and &lt;code&gt;Expression.CanReduce&lt;/code&gt; is &lt;code&gt;MemberInitExpression&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;I wanted to find out when &lt;code&gt;Expression.CanReduce&lt;/code&gt; would actually return &lt;code&gt;true&lt;/code&gt;. I discovered the &lt;a href=&#34;http://www.codeplex.com/Download?ProjectName=dlr&amp;amp;DownloadId=246540&#34;&gt;173 page Expression Tree Specification&lt;/a&gt; which provides an additional insight to &lt;code&gt;CanReduce&lt;/code&gt; and &lt;code&gt;Reduce()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;canreduce&#34;&gt;CanReduce&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;This property returns whether the Reduce method returns a different but semantically equivalent ET.  By default, this property returns false.&lt;/p&gt;

&lt;p&gt;In the typical case, the resulting ET contains all common ET nodes suitable for passing to any common compilation or ET processing code.  Sometimes the result is only partially reduced, and when walking the resulting ET, you&amp;rsquo;ll need to further reduce some nodes.&lt;/p&gt;

&lt;p&gt;The value returned by this property should never change for a given object.&lt;/p&gt;

&lt;p&gt;Signature:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;public virtual Boolean CanReduce { get; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;reduce&#34;&gt;Reduce&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;This method returns a semantically equivalent ET representing the same expression.  By default, this method returns the object on which it was invoked.&lt;/p&gt;

&lt;p&gt;Typically the result comprises only common ET types, ET nodes suitable for passing to any compilation or ET processing code.  Usually the result is only partially reduced (that is, only the root node).  You&amp;rsquo;ll probably need to further reduce some nodes.&lt;/p&gt;

&lt;p&gt;Signature:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;public virtual Expression Reduce();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;reducible-types-inside-system-linq-expressions&#34;&gt;Reducible Types Inside System.Linq.Expressions&lt;/h3&gt;

&lt;p&gt;Using &lt;a href=&#34;http://www.telerik.com/products/decompiler.aspx&#34;&gt;Telerik&amp;rsquo;s JustDecompile&lt;/a&gt;, I went through each public class to see which had an override on either &lt;code&gt;CanReduce&lt;/code&gt; or &lt;code&gt;Reduce()&lt;/code&gt;. The result came up with the following list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.linq.expressions.binaryexpression.aspx&#34;&gt;BinaryExpression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.linq.expressions.listinitexpression.aspx&#34;&gt;ListInitExpression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-GB/library/system.linq.expressions.memberinitexpression.aspx&#34;&gt;MemberInitExpression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.linq.expressions.unaryexpression.aspx&#34;&gt;UnaryExpression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Furthermore, I searched for descendant types of the list above and found the following reducible classes that were marked as internal, as such I couldn&amp;rsquo;t find any official documentation for them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AssignBinaryExpression&lt;/li&gt;
&lt;li&gt;CoalesceConversionBinaryExpression&lt;/li&gt;
&lt;li&gt;LogicalBinaryExpression&lt;/li&gt;
&lt;li&gt;SimpleBinaryExpression&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h3&gt;

&lt;p&gt;Inside the expression tree specification, I would also be inclined to read section 2.2 entitled &lt;em&gt;Reducible Nodes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If there are any additional expressions that can be reduced that I have missed, please send me a message and I will add it to the list.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How your binary search implementation is broken and how to fix it</title>
      <link>https://im5tu.io/article/2014/06/how-your-binary-search-implementation-is-broken-and-how-to-fix-it/</link>
      <pubDate>Fri, 20 Jun 2014 18:21:04 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2014/06/how-your-binary-search-implementation-is-broken-and-how-to-fix-it/</guid>
      <description>&lt;p&gt;I have recently begun studying the theory and implementations of algorithms. During this study, I came across &lt;a href=&#34;http://googleresearch.blogspot.co.uk/2006/06/extra-extra-read-all-about-it-nearly.html&#34;&gt;this post&lt;/a&gt; which describes how a bug exists in most implementations of a binary search algorithm. &lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll begin with the example given in the post, which is taken from &lt;code&gt;java.util.Arrays&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static int BinarySearch(int[] a, int key) {
    int low = 0;
    int high = a.length - 1;
    while (low &amp;lt;= high) {
        int mid = (low + high) / 2;
        int midVal = a[mid];
        if (midVal &amp;lt; key)
        {
            low = mid + 1;
        }
        else if (midVal &amp;gt; key)
        {
            high = mid - 1;
        }
        else
        {
            return mid; // key found
        }
    }
    return -(low + 1);  // key not found.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For all intensive purposes this implementation is correct. Except for a bug which can raise an Overflow Exception. The problematic line is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int mid = (low + high) / 2;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the result of &lt;code&gt;low + high&lt;/code&gt; is greater than maximum value of an 32-bit integer, the exception is raised. Luckily, there are ways that we can fix this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int mid = low + (high - low) / 2;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you&amp;rsquo;re in Java:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int mid = (low + high) &amp;gt;&amp;gt;&amp;gt; 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are working in .Net languages you will need to work with the &lt;code&gt;unchecked&lt;/code&gt; keyword in order to use the bit shift method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int mid;
unchecked
{
    mid = (low + high) &amp;gt;&amp;gt; 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;unchecked&lt;/code&gt; keyword is used to suppress overflow-checking for integral-type arithmetic operations and conversions.&lt;/p&gt;

&lt;p&gt;In an unchecked context, if an expression produces a value that is outside the range of the destination type, the overflow is not flagged. For example, because the calculation in the following example is performed in an unchecked block or expression, the fact that the result is too large for an integer is ignored, and int1 is assigned the value -2,147,483,639.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(&lt;a href=&#34;http://msdn.microsoft.com/en-GB/library/a569z7k8.aspx&#34;&gt;Source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;So here is the differential method in C#:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static int BinarySearch(int[] a, int key) {
    int low = 0;
    int high = a.length - 1;
    while (low &amp;lt;= high) {
        int mid = low + (high - low) / 2;
        int midVal = a[mid];
        if (midVal &amp;lt; key)
        {
            low = mid + 1;
        }
        else if (midVal &amp;gt; key)
        {
            high = mid - 1;
        }
        else
        {
            return mid; // key found
        }
    }
    return -1;  // key not found.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And using the bit shift method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static int BinarySearch(int[] a, int key) {
    int low = 0;
    int high = a.length - 1;
    while (low &amp;lt;= high) {
        int mid;
        unchecked
        {
            mid = (low + high) &amp;gt;&amp;gt; 1;
        }
        int midVal = a[mid];
        if (midVal &amp;lt; key)
        {
            low = mid + 1;
        }
        else if (midVal &amp;gt; key)
        {
            high = mid - 1;
        }
        else
        {
            return mid; // key found
        }
    }
    return -1;  // key not found.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Personally, I prefer the differential version over the bit shift version but I have provided both for completeness. Even though this bug only manifests itself with well over a billion elements in an array, I still thought it was worth pointing out. I encourage you to read the other articles for more complete context.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unit Testing Equals The Forgotten Tests</title>
      <link>https://im5tu.io/article/2014/06/unit-testing-equals-the-forgotten-tests/</link>
      <pubDate>Wed, 18 Jun 2014 18:20:25 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2014/06/unit-testing-equals-the-forgotten-tests/</guid>
      <description>&lt;p&gt;Today I wanted to cover something that is not often covered when unit testing an object. If an object has the &lt;code&gt;Equals&lt;/code&gt; method overridden, then there are a number of tests that we should be running as a minimum, these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reflexive Tests&lt;/li&gt;
&lt;li&gt;Symmetric Tests&lt;/li&gt;
&lt;li&gt;Transitive Tests&lt;/li&gt;
&lt;li&gt;Consistency Tests&lt;/li&gt;
&lt;li&gt;Not-Null Tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;reflexive-tests&#34;&gt;Reflexive Tests&lt;/h3&gt;

&lt;p&gt;A reflexive test is one where an object is equal to itself. In other words, the following expression should be true: &lt;code&gt;x.Equals(x)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void ReflexiveTest()
{
    var x = new TestClass();

    Assert.IsTrue(x.Equals(x));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;symmetric-tests&#34;&gt;Symmetric Tests&lt;/h3&gt;

&lt;p&gt;A symmetric test is one where an object (&lt;code&gt;x&lt;/code&gt;) is equal to another instance (&lt;code&gt;y&lt;/code&gt;), only if the second instance (&lt;code&gt;y&lt;/code&gt;) is also equal to the first instance (&lt;code&gt;x&lt;/code&gt;). In essence, if &lt;code&gt;x.Equals(y)&lt;/code&gt; then &lt;code&gt;y.Equals(x)&lt;/code&gt; should also be true.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void SymmetricTest()
{
    var x = new TestClass();
    var y = new TestClass();

    Assert.IsTrue(x.Equals(y));
    Assert.IsTrue(y.Equals(x));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;transitive-tests&#34;&gt;Transitive Tests&lt;/h3&gt;

&lt;p&gt;A transitive tests is one where if object &lt;code&gt;x&lt;/code&gt; is equal to &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;y&lt;/code&gt; is equal to &lt;code&gt;z&lt;/code&gt;, then &lt;code&gt;x&lt;/code&gt; should also be equal to &lt;code&gt;z&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void TransitiveTest()
{
    var x = new TestClass();
    var y = new TestClass();
    var z = new TestClass();

    Assert.IsTrue(x.Equals(y));
    Assert.IsTrue(y.Equals(z));
    Assert.IsTrue(x.Equals(z));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;consistency-tests&#34;&gt;Consistency Tests&lt;/h3&gt;

&lt;p&gt;A consistent test should ensure that regardless of how many invocations of the &lt;code&gt;Equals&lt;/code&gt; method occurs, the result should remain the same. For example, both of the following tests should pass:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void ConsistencyTest_2Invocations()
{
    var x = new TestClass();
    var y = new TestClass();

    Assert.IsTrue(x.Equals(y));
    Assert.IsTrue(x.Equals(y));
}

[Test]
public void ConsistencyTest_3Invocations()
{
    var x = new TestClass();
    var y = new TestClass();

    Assert.IsTrue(x.Equals(y));
    Assert.IsTrue(x.Equals(y));
    Assert.IsTrue(x.Equals(y));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;not-null-tests&#34;&gt;Not-Null Tests&lt;/h3&gt;

&lt;p&gt;If the &lt;code&gt;Equals&lt;/code&gt; method is called with a null argument, the result of the test should always be &lt;code&gt;false&lt;/code&gt;. This is because an instance of an object is never equal to a null reference.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void NullTest()
{
    var x = new TestClass();

    Assert.IsFalse(x.Equals(null));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;other-notes-about-overriding-equals&#34;&gt;Other notes about overriding Equals&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you override &lt;code&gt;Equals()&lt;/code&gt;, ensure that you override &lt;code&gt;GetHashCode()&lt;/code&gt; as well.

&lt;ul&gt;
&lt;li&gt;If two objects are equal, then they must return the same value for &lt;code&gt;GetHashCode()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;GetHashCode()&lt;/code&gt; is equal, it is not necessary for them to be the same; this is a collision and &lt;code&gt;Equals()&lt;/code&gt; should be called to see if the objects are equal in reality&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If possible, always implement the &lt;code&gt;IEquatable&amp;lt;T&amp;gt;&lt;/code&gt; interface on your custom objects as this provides type safety for other programmers and prevents boxing on value-types.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Enabling HTTP Strict Transport Security HSTS via Web Config</title>
      <link>https://im5tu.io/article/2014/06/enabling-http-strict-transport-security-hsts-via-web-config/</link>
      <pubDate>Tue, 10 Jun 2014 18:19:47 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2014/06/enabling-http-strict-transport-security-hsts-via-web-config/</guid>
      <description>&lt;p&gt;In my previous post, I discussed how to &lt;a href=&#34;https://im5tu.io/article/2014/04/enabling-http-strict-transport-security-hsts-via-asp-net-mvc-actionfilters/&#34;&gt;enable HSTS via MVC Action Filters&lt;/a&gt;. I thought that I would just do a follow up post showing you how to enable it via the web.config. &lt;/p&gt;

&lt;p&gt;In order to do this via a web configuration file, you must be running IIS 7.0 or higher, &lt;a href=&#34;http://www.iis.net/configreference/system.webserver/httpprotocol/customheaders#002&#34;&gt;according to this compatability chart&lt;/a&gt;. The reason for this, is that the &lt;code&gt;HttpProtocol&lt;/code&gt; element was added in IIS 7.0. This is the element that is responsible for generating custom headers.&lt;/p&gt;

&lt;p&gt;Below is a small sample configuration that enables a custom header called &lt;code&gt;Header Name&lt;/code&gt; with the value &lt;code&gt;Header Value&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;configuration&amp;gt;
  &amp;lt;system.webServer&amp;gt;
    &amp;lt;httpProtocol&amp;gt;
      &amp;lt;customHeaders&amp;gt;
        &amp;lt;add name=&amp;quot;Header Name&amp;quot; value=&amp;quot;Header Value&amp;quot; /&amp;gt;
      &amp;lt;/customHeaders&amp;gt;
    &amp;lt;/httpProtocol&amp;gt;
  &amp;lt;/system.webServer&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to enable HSTS, we need to change the header name to be &lt;code&gt;Strict-Transport-Security&lt;/code&gt; and the value to be &lt;code&gt;max-age=x&lt;/code&gt; (where x is, replace with the maximum age in seconds). If you wish to enable this for sub-domains as well, append &lt;code&gt;; includeSubDomains&lt;/code&gt; to the header value.&lt;/p&gt;

&lt;p&gt;The end result for enabling HSTS with a 300 second limit is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;configuration&amp;gt;
  &amp;lt;system.webServer&amp;gt;
    &amp;lt;httpProtocol&amp;gt;
      &amp;lt;customHeaders&amp;gt;
        &amp;lt;add name=&amp;quot;Strict-Transport-Security&amp;quot; value=&amp;quot;max-age=300&amp;quot; /&amp;gt;
      &amp;lt;/customHeaders&amp;gt;
    &amp;lt;/httpProtocol&amp;gt;
  &amp;lt;/system.webServer&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Including the sub-domain protection:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;configuration&amp;gt;
  &amp;lt;system.webServer&amp;gt;
    &amp;lt;httpProtocol&amp;gt;
      &amp;lt;customHeaders&amp;gt;
        &amp;lt;add name=&amp;quot;Strict-Transport-Security&amp;quot; value=&amp;quot;max-age=300; includeSubDomains&amp;quot; /&amp;gt;
      &amp;lt;/customHeaders&amp;gt;
    &amp;lt;/httpProtocol&amp;gt;
  &amp;lt;/system.webServer&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Enabling HTTP Strict Transport Security HSTS via ASP Net MVC ActionFilters</title>
      <link>https://im5tu.io/article/2014/04/enabling-http-strict-transport-security-hsts-via-asp-net-mvc-actionfilters/</link>
      <pubDate>Mon, 21 Apr 2014 18:19:47 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2014/04/enabling-http-strict-transport-security-hsts-via-asp-net-mvc-actionfilters/</guid>
      <description>&lt;p&gt;After reading &lt;a href=&#34;http://www.troyhunt.com/&#34;&gt;Troy Hunt&amp;rsquo;s&lt;/a&gt; free ebook on the &lt;a href=&#34;http://www.troyhunt.com/2011/12/free-ebook-owasp-top-10-for-net.html&#34;&gt;OWASP Top 10 for .Net Developers&lt;/a&gt;, I discovered an additional mechanism to help developers secure their websites. That mechanism is HTTP Strict Transport Security.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HTTP Strict Transport Security (HSTS) is an opt-in security enhancement that is specified by a web application through the use of a special response header. Once a supported browser receives this header that browser will prevent any communications from being sent over HTTP to the specified domain and will instead send all communications over HTTPS. It also prevents HTTPS click through prompts on browsers. The specification has been released and published end of 2012 as &lt;a href=&#34;https://tools.ietf.org/html/rfc6797&#34;&gt;RFC 6797&lt;/a&gt;. &lt;a href=&#34;https://www.owasp.org/index.php/HTTP_Strict_Transport_Security&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are three main categories of attacks that are addressed in this specification: Passive Network Attacks, Active Network Attacks and Web Site Development &amp;amp; Deployment Bugs. These are present in &lt;a href=&#34;https://tools.ietf.org/html/rfc6797&#34;&gt;RFC 6797 - Section 2.3.1&lt;/a&gt; but are re-produced here.&lt;/p&gt;

&lt;h2 id=&#34;passive-network-attacks&#34;&gt;Passive Network Attacks&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;When a user browses the web on a local wireless network (e.g., an
   802.11-based wireless local area network) a nearby attacker can
   possibly eavesdrop on the user&amp;rsquo;s unencrypted Internet Protocol-based
   connections, such as HTTP, regardless of whether or not the local
   wireless network itself is secured [BeckTews09].  Freely available
   wireless sniffing toolkits (e.g., [Aircrack-ng]) enable such passive
   eavesdropping attacks, even if the local wireless network is
   operating in a secure fashion.  A passive network attacker using such
   tools can steal session identifiers/cookies and hijack the user&amp;rsquo;s web
   session(s) by obtaining cookies containing authentication credentials
   [ForceHTTPS].  For example, there exist widely available tools, such
   as Firesheep (a web browser extension) [Firesheep], that enable their
   wielder to obtain other local users&amp;rsquo; session cookies for various web
   applications.&lt;/p&gt;

&lt;p&gt;To mitigate such threats, some web sites support, but usually do not
   force, access using end-to-end secure transport &amp;ndash; e.g., signaled
   through URIs constructed with the &amp;ldquo;https&amp;rdquo; scheme [RFC2818].  This can
   lead users to believe that accessing such services using secure
   transport protects them from passive network attackers.
   Unfortunately, this is often not the case in real-world deployments,
   as session identifiers are often stored in non-Secure cookies to
   permit interoperability with versions of the service offered over
   insecure transport (&amp;ldquo;Secure cookies&amp;rdquo; are those cookies containing the
   &amp;ldquo;Secure&amp;rdquo; attribute [RFC6265]).  For example, if the session
   identifier for a web site (an email service, say) is stored in a
   non-Secure cookie, it permits an attacker to hijack the user&amp;rsquo;s
   session if the user&amp;rsquo;s UA makes a single insecure HTTP request to the
   site.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;active-network-attacks&#34;&gt;Active Network Attacks&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A determined attacker can mount an active attack, either by
   impersonating a user&amp;rsquo;s DNS server or, in a wireless network, by
   spoofing network frames or offering a similarly named evil twin
   access point.  If the user is behind a wireless home router, an
   attacker can attempt to reconfigure the router using default
   passwords and other vulnerabilities.  Some sites, such as banks, rely
   on end-to-end secure transport to protect themselves and their users
   from such active attackers.  Unfortunately, browsers allow their
   users to easily opt out of these protections in order to be usable for sites that incorrectly deploy secure transport, for example by
   generating and self-signing their own certificates (without also
   distributing their certification authority (CA) certificate to their
   users&amp;rsquo; browsers).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;website-development-deployment-bugs&#34;&gt;Website Development &amp;amp; Deployment Bugs&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The security of an otherwise uniformly secure site (i.e., all of its
   content is materialized via &amp;ldquo;https&amp;rdquo; URIs) can be compromised
   completely by an active attacker exploiting a simple mistake, such as
   the loading of a cascading style sheet or a SWF (Shockwave Flash)
   movie over an insecure connection (both cascading style sheets and
   SWF movies can script the embedding page, to the surprise of many web
   developers, plus some browsers do not issue so-called &amp;ldquo;mixed content
   warnings&amp;rdquo; when SWF files are embedded via insecure connections).
   Even if the site&amp;rsquo;s developers carefully scrutinize their login page
   for &amp;ldquo;mixed content&amp;rdquo;, a single insecure embedding anywhere on the
   overall site compromises the security of their login page because an
   attacker can script (i.e., control) the login page by injecting code
   (e.g., a script) into another, insecurely loaded, site page.&lt;/p&gt;

&lt;p&gt;NOTE:  &amp;ldquo;Mixed content&amp;rdquo; as used above (see also Section 5.3 in
          [W3C.REC-wsc-ui-20100812]) refers to the notion termed &amp;ldquo;mixed
          security context&amp;rdquo; in this specification and should not be
          confused with the same &amp;ldquo;mixed content&amp;rdquo; term used in the
          context of markup languages such as XML and HTML.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;implementation-details&#34;&gt;Implementation Details&lt;/h2&gt;

&lt;p&gt;Implementing the HSTS from the web server is simply a case of having the site running over HTTPS and appending a single header onto the response. The header required is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Strict-Transport-Security: max-age=300
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, if you wish the security to cover all sub-domains of your site, then the header is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Strict-Transport-Security: max-age=300; includeSubDomains
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Where 300 is, replace with the duration in seconds.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;implementing-hsts-as-an-action-filter&#34;&gt;Implementing HSTS as an action filter&lt;/h2&gt;

&lt;p&gt;The implementation that I provide below &lt;strong&gt;SHOULD&lt;/strong&gt; be used alongside the &lt;code&gt;RequireHttpsAttribute&lt;/code&gt; in order to have the specification fully implemented. The reason is that the header will only be sent over a secure connection, if not already present. Furthermore, the &lt;code&gt;RequireHttpsAttribute&lt;/code&gt; already takes care of the redirection to a secure connection, so this is not something that I have to worry about implementing correctly.&lt;/p&gt;

&lt;h2 id=&#34;browser-support&#34;&gt;Browser support&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Chromium and Google Chrome since version 4.0.211.0&lt;/li&gt;
&lt;li&gt;Firefox since version 4; with Firefox 17, Mozilla integrates a list of websites supporting HSTS&lt;/li&gt;
&lt;li&gt;Opera since version 12&lt;/li&gt;
&lt;li&gt;Safari as of OS X Mavericks
-Internet Explorer does not support HSTS, but is expected to support it in the next major release after IE 11&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Becoming An MCP</title>
      <link>https://im5tu.io/article/2013/06/becoming-an-mcp/</link>
      <pubDate>Mon, 10 Jun 2013 20:14:39 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2013/06/becoming-an-mcp/</guid>
      <description>&lt;p&gt;As the title suggests, today I passed the 70-483 Programming in C# exam to offically become a Microsoft Certifed Professional.
&lt;/p&gt;

&lt;p&gt;This is one of the things that has been in my sights for a very long time now, so I am extremly happy to have passed. I throughly recommend doing it for yourself if you haven&amp;rsquo;t done so already. I know exams aren&amp;rsquo;t everyones cup of tea, but even if you decide not to take the exam, I believe that the knownledge you gain during the study phase will prove invaluable to your day to day work.&lt;/p&gt;

&lt;p&gt;Since I already had 5 years programming experience with the .Net environment, the exam was mainly a tick in the box. That said, I would throughly recommend you read the &lt;a href=&#34;http://www.amazon.co.uk/CLR-via-Developer-Reference-ebook/dp/B00AA36R4U/ref=tmm_kin_title_0/277-8084778-0056569&#34;&gt;CLR via C# Forth Edition&lt;/a&gt;. The book gives a fantasic insight into the inner workings of the CLR and why some features are not supported by C#.&lt;/p&gt;

&lt;p&gt;I wish you all the best of luck if you decide to take this exam.&lt;/p&gt;

&lt;p&gt;Stu&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using IDisposible correctly</title>
      <link>https://im5tu.io/article/2013/05/using-idisposible-correctly/</link>
      <pubDate>Mon, 06 May 2013 18:09:25 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2013/05/using-idisposible-correctly/</guid>
      <description>&lt;p&gt;In this article, I am going to show you how to use the &lt;code&gt;IDisposable&lt;/code&gt; interface correctly in your code. When I read others code, it is easy to pick up on subtle bugs. We need to begin to train ourselves to see the bugs and we do this by understanding what we are using. Before we begin, we need to make sure that we understand a core piece of computer science theory: Destructors.
&lt;/p&gt;

&lt;h2 id=&#34;destructors&#34;&gt;Destructors&lt;/h2&gt;

&lt;p&gt;Generally speaking, destructors are the computers way of releasing resources from an application. In environments that contain a virtual machine with a garbage collection facility, the destructor is automatically called. In these environments however, the destructor is also called a &lt;code&gt;Finalizer&lt;/code&gt;. Although these environments are &lt;s&gt;good&lt;/s&gt; excellent at managing memory for us, we cannot guarantee when the &lt;code&gt;Finalizer&lt;/code&gt; is going to be called.&lt;/p&gt;

&lt;h2 id=&#34;enter-dispose&#34;&gt;Enter Dispose&lt;/h2&gt;

&lt;p&gt;The purpose of the &lt;code&gt;Dispose&lt;/code&gt; is to guarantee when we are going to release resources. This might be at the end of a &lt;code&gt;foreach&lt;/code&gt; loop or at the end of a database connection. Either way, we have control of when we can release the resources. There are two types of resources that can be released: Managed and Unmanaged.&lt;/p&gt;

&lt;p&gt;Managed resources are typically objects that are run and controlled by the Common Language Runtime (CLR). Managed code supplies the metadata necessary for the CLR to provide services such as memory management and cross-language integration &lt;a href=&#34;http://stackoverflow.com/questions/334326/what-is-managed-unmanaged-code-in-c&#34;&gt;(Source)&lt;/a&gt;. Unmanaged resources are those outside the CLR such as Win32 API&amp;rsquo;s. These can be called from within managed code allowing some serious memory leaks if we are not careful.&lt;/p&gt;

&lt;p&gt;The .Net libraries have some useful interfaces in them, one of them being the &lt;code&gt;IDisposable&lt;/code&gt; interface. This interface has just one method called &lt;code&gt;Dispose&lt;/code&gt; (the name seems standard from what I have seen). Here is the implementation of the interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public interface IDisposable
    {
       void Dispose()
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we first implement the interface on our class, we are given the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public sealed class MyClass : IDisposable
    {
        public void Dispose()
        {
            /* Release resources here */
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this implementation is fine if you don&amp;rsquo;t mind waiting for the garbage collector to come and release the resources. What if your class has a large object inside (say ~250mb). Do you really want to wait for the garbage collector? Probably not.&lt;/p&gt;

&lt;p&gt;In order to fix our implementation, we need to do two things. Firstly, we need to implement a &lt;code&gt;Finalizer&lt;/code&gt; and then implement an overload to the original &lt;code&gt;Dispose&lt;/code&gt; method. The reason why we implement a &lt;code&gt;Finalizer&lt;/code&gt; is because we want to safe-guard ourselves if we forget to call the &lt;code&gt;Dispose&lt;/code&gt; method. For those that do not know what a &lt;code&gt;Finalizer&lt;/code&gt; looks like, here it is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public sealed class MyClass : IDisposable
    {
        public MyClass()
        {
            /* Constructor */
        }

        public ~MyClass()
        {
            /* Destructor */
        }

        public void Dispose()
        {
            /* Release resources here */
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to safe-guard ourselves as I just mentioned, our &lt;code&gt;Finalizer&lt;/code&gt; needs to call our &lt;code&gt;Dispose&lt;/code&gt; method like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public ~MyClass()
    {
        /* Destructor */
        Dispose();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may have realised by now that we could, potentially, call the &lt;code&gt;Dispose&lt;/code&gt; twice. The user will call it once followed by the CLR calling it for us in case we forget (through the &lt;code&gt;Finalizer&lt;/code&gt;). This gives us the requirement for the overload of the &lt;code&gt;Dispose&lt;/code&gt; method I mentioned earlier. If &lt;strong&gt;we&lt;/strong&gt; call the &lt;code&gt;Dispose&lt;/code&gt; method then it is &lt;em&gt;safe&lt;/em&gt; for us to release managed resources. However, if the &lt;strong&gt;CLR&lt;/strong&gt; calls the &lt;code&gt;Dispose&lt;/code&gt; method then we cannot safely release managed resources because we do not know their current state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The CLR runs on a background thread, which we have no control over. Therefore, we cannot know any objects state on that thread.&lt;/p&gt;

&lt;p&gt;Now that we have identified that the &lt;code&gt;Dispose&lt;/code&gt; method can be called from two places, we can implement this into our code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public sealed class MyClass : IDisposable
    {
        public MyClass()
        {
            /* Constructor */
        }

        public ~MyClass()
        {
            /* Destructor */
            Dispose(false); // the CLR will call Dispose, so its an unsafe call
        }

        public void Dispose()
        {
            /* The interface implementation */
            Dispose(true); // WE are calling Dispose, so its a safe call
        }

        public void Dispose(bool safeToFreeManagedResources)
        {
            /* Free unmanaged resources */

            if (safeToFreeManagedResources)
            {
                /*  Free managed resources */
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though we have told the CLR that we are not to release managed resources twice, we will still release unmanaged resources twice. This is not only wasteful, but you could end up with an exception here which is something that &lt;strong&gt;SHOULD NEVER HAPPEN&lt;/strong&gt;. Luckily for us, the CLR has a neat way for us to tell it not to call the &lt;code&gt;Finalizer&lt;/code&gt; because we have already released all the resources necessary. Here is the one line magic fix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public void Dispose()
    {
        /* The interface implementation */
        Dispose(true); // WE are calling Dispose, so its a safe call
        GC.SuppressFinalize(this); // WE have called dispose, there is no need to call it again Mr. GC.
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;best-practise&#34;&gt;Best Practise&lt;/h2&gt;

&lt;p&gt;Now that we have our code fixed, without any issues or bugs, it&amp;rsquo;s time to know a best practise. When an object implements the &lt;code&gt;IDisposable&lt;/code&gt; interface, we have the opportunity to use the &lt;code&gt;using&lt;/code&gt; statement. The idea of the &lt;code&gt;using&lt;/code&gt; statement is that once you have finished with the object, the CLR will call the &lt;code&gt;Dispose&lt;/code&gt; method for you. Note I said &lt;code&gt;Dispose&lt;/code&gt; not the &lt;code&gt;Finalizer&lt;/code&gt;. The &lt;code&gt;using&lt;/code&gt; statement is really easy to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    static void Main(string[] args)
    {
        using (var myClass = new MyClass())
        {
            /* Do stuff here */
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the compiler sees this code, it actually expands it to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    static void Main(string[] args)
    {
        var myClass = new MyClass();
        try
        {
            /* Do stuff here */
        }
        finally
        {
            myClass.Dispose();
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So there it is. Hopefully now you can implement &lt;code&gt;IDisposable&lt;/code&gt; correctly according to your needs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Semaphore vs SeamphoreSlim Micro Benchmark</title>
      <link>https://im5tu.io/article/2013/03/semaphore-vs-seamphoreslim-micro-benchmark/</link>
      <pubDate>Mon, 11 Mar 2013 18:06:28 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2013/03/semaphore-vs-seamphoreslim-micro-benchmark/</guid>
      <description>&lt;p&gt;In this post, I am going to show a small micro-benchmark to demonstrate the performance difference between the &lt;code&gt;Semaphore&lt;/code&gt; and &lt;code&gt;SemaphoreSlim&lt;/code&gt; classes in C#. A &lt;code&gt;Semaphore&lt;/code&gt; is often used to restrict the number of threads than can access some (physical or logical) resource. In this case, we want the restriction to be as little as possible.
&lt;/p&gt;

&lt;p&gt;Semaphores are of two types: local semaphores and named system semaphores. If you create a Semaphore object using a constructor that accepts a name, it is associated with an operating-system semaphore of that name. Named system semaphores are visible throughout the operating system, and can be used to synchronize the activities of processes. You can create multiple Semaphore objects that represent the same named system semaphore, and you can use the OpenExisting method to open an existing named system semaphore. &lt;em&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-gb/library/system.threading.semaphore.aspx&#34;&gt;Source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A local semaphore exists only within your process. It can be used by any thread in your process that has a reference to the local Semaphore object. Each Semaphore object is a separate local semaphore. &lt;em&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-gb/library/system.threading.semaphore.aspx&#34;&gt;Source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The machine that I am using for this benchmark is a Intel core i3, clocked at 4ghz with 4GB DDR3 ram running Windows 7 x64 SP1 and .Net Framework 4.5.&lt;/p&gt;

&lt;p&gt;In order to begin the test, I created a new console application and imported the BMark package from the &lt;a href=&#34;https://nuget.org/packages/BMark/&#34;&gt;NuGet&lt;/a&gt; repository. Next, I added the following code to the application as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const Int32 count = 106;

Semaphore regularSemaphore = new Semaphore(count, count);
SemaphoreSlim slimSemaphore = new SemaphoreSlim(count, count);

UInt64 amountToRun = (UInt64)(count - PerformanceTester.PreRunAmount - 2);

PerformanceTester.Run(&amp;quot;Semaphore.WaitOne&amp;quot;, amountToRun, () =&amp;gt; { regularSemaphore.WaitOne(); });
PerformanceTester.Run(&amp;quot;Semaphore.Release&amp;quot;, amountToRun, () =&amp;gt; { regularSemaphore.Release(); });
PerformanceTester.Run(&amp;quot;SemaphoreSlim.WaitOne&amp;quot;, amountToRun, () =&amp;gt; { slimSemaphore.Wait(); });
PerformanceTester.Run(&amp;quot;SemaphoreSlim.Release&amp;quot;, amountToRun, () =&amp;gt; { slimSemaphore.Release(); });

Console.WriteLine(PerformanceTester.GetResults());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, the &lt;code&gt;PerformanceTester&lt;/code&gt; will run each test 4 times before starting the actual timed test. Since we are dealing with a blocking resource, I added some extra capacity so that the test would not block at any point. When the code is run in release mode without the debugger, the output of the program is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Semaphore.WaitOne:         0.09ms    NumberOfSamples: 100
Semaphore.Release:         0.05ms    NumberOfSamples: 100
SemaphoreSlim.WaitOne:     0.01ms    NumberOfSamples: 100
SemaphoreSlim.Release:     0.01ms    NumberOfSamples: 100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the results show, the &lt;code&gt;SemaphoreSlim&lt;/code&gt; class is a tiny bit quicker. After testing this myself earlier, I thought that others could run this themselves and hopefully receive a small increase in performance in their applications. The reason for the performance increase is because the &lt;code&gt;SemaphoreSlim&lt;/code&gt; class provides a lightweight alternative to the &lt;code&gt;Semaphore&lt;/code&gt; class that doesn&amp;rsquo;t use Windows kernel semaphores.&lt;/p&gt;

&lt;p&gt;In essence, if you do not need a named &lt;code&gt;Semaphore&lt;/code&gt;, use the &lt;code&gt;SemaphoreSlim&lt;/code&gt; class.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Extension methods in dotnet</title>
      <link>https://im5tu.io/article/2012/12/extension-methods-in-dotnet/</link>
      <pubDate>Sat, 01 Dec 2012 17:51:38 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2012/12/extension-methods-in-dotnet/</guid>
      <description>&lt;p&gt;In this article we will take a look at what extension methods are and how to use them in .Net. Personally, they are one of the best things that has been introduced into the .Net framework in terms of readability. I will take you through what extension methods are, how to create them (in c# and vb) then I will show you some of the extension methods that I have created (in c# only, conversion is for you to try).
&lt;/p&gt;

&lt;h2 id=&#34;contents&#34;&gt;Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What are extension methods?&lt;/li&gt;
&lt;li&gt;How do we create extension methods?&lt;/li&gt;
&lt;li&gt;Examples of extension methods&lt;/li&gt;
&lt;li&gt;Related Links&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;what-are-extension-methods&#34;&gt;What are extension methods?&lt;/h3&gt;

&lt;p&gt;Extension methods allow you to easily extend a type, such as an integer or string, without re-compiling or modifying the type. In essence, they are a type of &lt;code&gt;static&lt;/code&gt; (&lt;code&gt;shared&lt;/code&gt; in vb) method, but they are called as
if the method is native to the type. Extension methods are available from the 3.5 version of the .Net Framework and can be implemented on any type in the .Net framework or any custom type that you define.&lt;/p&gt;

&lt;p&gt;One downside to extension methods is if that you create an extension method with the same name as another method in that type, the compiler will bind the method call to the native method not any extension. An
extension method is only called when there is no native method found.&lt;/p&gt;

&lt;h4 id=&#34;warning&#34;&gt;Warning&lt;/h4&gt;

&lt;p&gt;If you declare an extension method on the type Object, you will effectively create the extension method for every type in the framework including but not limited to String, Integer and Lists.&lt;/p&gt;

&lt;h3 id=&#34;how-do-we-create-extension-methods&#34;&gt;How do we create extension methods?&lt;/h3&gt;

&lt;p&gt;The basic outline of a creating extension methods goes something like this:&lt;/p&gt;

&lt;p&gt;â€‹1. Create a public &lt;code&gt;static&lt;/code&gt; class (&lt;code&gt;module&lt;/code&gt; in vb) &lt;br /&gt;
 2. Define functions that you wish to perform&lt;br /&gt;
 3. Make the functions an extension method&lt;/p&gt;

&lt;p&gt;Following through a complete example, I will now demonstrate how to create an extension method that returns the first 3 characters of a string. Using the list above, I must first create a &lt;code&gt;static class&lt;/code&gt; or
&lt;code&gt;module&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // C#
    public static class Extensions
    {

    }

    &#39; VB
    Module Extenstions

    End Module
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next phase would be to write the function that we are going need, which in this case is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // C#
    public static class Extensions
    {
        public string GetFirstThreeCharacters(String str)
        {
            if(str.Length &amp;lt; 3)
            {
                return str;
            }
            else
            {
                return str.Substring(0,3);
            }
        }
    }

    &#39; VB
    Module Extenstions

    Public Function GetFirstThreeCharacters(Byval str As String) As String
        If (str.Length &amp;lt; 3) Then
            return str
        Else
            return str.SubString(0,3)
        End If
    End Function

    End Module
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far, we have done nothing special. In the last phase is to make the functions extension methods. It is slightly more complicated in VB but not by much. I will deal with C# first.&lt;/p&gt;

&lt;p&gt;To make our C# version of our function an extension method we need to mark the function as static (so that it can be accessed at any time with out the need for declaring anything) and secondly, marking the first
paramter with the &lt;code&gt;this&lt;/code&gt; keyword. This keyword basically tells the CLR that when this extension method is called, to use &amp;ldquo;this&amp;rdquo; parameter as the source. See the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public static class Extensions
    {
        public static string GetFirstThreeCharacters(this String str)
        {
            if(str.Length &amp;lt; 3)
            {
                return str;
            }
            else
            {
                return str.Substring(0,3);
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now for the VB version. Instead of using the &lt;code&gt;this&lt;/code&gt; keyword, we need to do something slightly different. We need to mark the function with the &lt;code&gt;System.Runtime.CompilerServices.Extension&lt;/code&gt; attribute like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;System.Runtime.CompilerServices.Extension&amp;gt; _
    Public Function GetFirstThreeCharacters(Byval str As String) As String
        If str.Length &amp;lt; 3 Then
                Return str
        Else
                Return str.Substring(0, 3)
        End If
    End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you copy this code into any project, you should be able to call it like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // C#
    String str = &amp;quot;my new String&amp;quot;;
    str = str.GetFirstThreeCharacters();

    &#39; VB
    Dim str as String = &amp;quot;my new String&amp;quot;
    str = str.GetFirstThreeCharacters()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As I explained for both languages above, the effective use of the &lt;code&gt;this&lt;/code&gt; keyword, makes the CLR take what ever we are calling the extension method from as the first parameter to our function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: Try adding an additional &lt;code&gt;Integer&lt;/code&gt; parameter and using that as a replacement for the 0 in the code above.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;examples-of-extension-methods&#34;&gt;Examples of extension methods&lt;/h3&gt;

&lt;p&gt;Here are a few of the extensions that I have found or created over time. These are helpful to me and I hope they are to you as well. If you have a question about any of these, drop me a comment below.&lt;/p&gt;

&lt;h4 id=&#34;haselements&#34;&gt;HasElements&lt;/h4&gt;

&lt;p&gt;Something that I often do is check a collection for a value. This method is designed to prevent me constantly checking for a null value and existance of any item in a given collection. This method will work on any collection that implents the &lt;code&gt;ICollection&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definition:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /// &amp;lt;summary&amp;gt;
   /// Determines whether the specified collection has any elements in the sequence. This method also checks for a null collection.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;items&amp;quot;&amp;gt;The ICollection of items to check.&amp;lt;/param&amp;gt;
    public static bool HasElements(this ICollection items)
    {
        return items != null &amp;amp;&amp;amp; items.Count &amp;gt; 0;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Example usage:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    List&amp;lt;String&amp;gt; myList = new List&amp;lt;String&amp;gt;();
    if (myList.HasElements())
    {
        // do some code
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;isbetween&#34;&gt;IsBetween&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;IsBetween&lt;/code&gt; method returns a boolean and determins whether or not a value is between an inclusive upper and lower boundry. This will only work on types that implement the &lt;code&gt;IComparable&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definition:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /// &amp;lt;summary&amp;gt;
    /// Determins whether a value is between a minimum and maximum value.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;The type of the value parameter.&amp;lt;/typeparam&amp;gt;
    /// &amp;lt;param name=&amp;quot;value&amp;quot;&amp;gt;The value that needs to be checked.&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;low&amp;quot;&amp;gt;The inclusive lower boundry.&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;high&amp;quot;&amp;gt;The inclusive upper boundry.&amp;lt;/param&amp;gt;
    public static bool IsBetween&amp;lt;T&amp;gt;(this T value, T low, T high) where T : IComparable&amp;lt;T&amp;gt;
    {
        return value.CompareTo(low) &amp;gt;= 0 &amp;amp;&amp;amp; value.CompareTo(high) &amp;lt;= 0;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Example usage:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Int32 myInt = 0;
    myInt.IsBetween(0, 5); // returns true
    myInt.IsBetween(1, 5); // returns false
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;each&#34;&gt;Each&lt;/h4&gt;

&lt;p&gt;Quite often I have to perform a task on a collection of items. This is just a shortcut way for saying for each element in the collection, perform this action. This will work on any collection that implements
the &lt;code&gt;ICollection&lt;/code&gt; interface. The action that is parsed in can be a lambda expression or a function/subroutine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definition:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /// &amp;lt;summary&amp;gt;
    /// Executes the given action against the given ICollection instance.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;The type of the ICollection parameter.&amp;lt;/typeparam&amp;gt;
    /// &amp;lt;param name=&amp;quot;items&amp;quot;&amp;gt;The collection the action is performed against.&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;action&amp;quot;&amp;gt;The action that is performed on each item.&amp;lt;/param&amp;gt;
    public static void Each&amp;lt;T&amp;gt;(this ICollection&amp;lt;T&amp;gt; items, Action&amp;lt;T&amp;gt; action)
    {
        foreach (T item in items)
        {
            action(item);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Example usage:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    List&amp;lt;String&amp;gt; myList = new List&amp;lt;String&amp;gt;();
    myList.Each(el =&amp;gt; 
    {
        // perform an action(s) on the item
        el.Substring(0,1);
        el = el;
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;in&#34;&gt;In&lt;/h4&gt;

&lt;p&gt;Often it is neccessary to determine whether a value is in a set collection. For example, I need to check whether a string is in an allowed list. This method will allows us to check any value against an
array of values of the same type.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definition:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /// &amp;lt;summary&amp;gt;
    /// Determines whether a parameter is in a given list of parameters. Eg. 11.In(1,2,3) will return false.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;The type of the source parameter.&amp;lt;/typeparam&amp;gt;
    /// &amp;lt;param name=&amp;quot;source&amp;quot;&amp;gt;The item that needs to be checked.&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;list&amp;quot;&amp;gt;The list that will be checked for the given source.&amp;lt;/param&amp;gt;
    public static bool In&amp;lt;T&amp;gt;(this T source, params T[] list)
    {
        if (null == source) throw new ArgumentNullException(&amp;quot;source&amp;quot;);
        return list.Contains(source);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Example usage:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Int32 myInt = 0;
    myInt.In(0, 0, 1, 2, 3); // returns true
    myInt.In(1, 5, 6, 7, 8); // returns false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully, you now have an understanding of how to implement extension methods in both C# and VB.Net.&lt;/p&gt;

&lt;h3 id=&#34;related-links&#34;&gt;Related Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb383977.aspx&#34;&gt;MSDN: Extension Methods (C# Programming
Guide)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.extensionmethod.net/&#34;&gt;Example of extension methods
(&lt;/a&gt;&lt;a href=&#34;http://www.extensionmethod.net/&#34;&gt;http://www.extensionmethod.net/)&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>