<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clean Code on Stuart Blackler&#39;s Blog</title>
    <link>https://im5tu.io/tags/clean-code/index.xml</link>
    <description>Recent content in Clean Code on Stuart Blackler&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://im5tu.io/tags/clean-code/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Write Good Code, Not Code Hastily</title>
      <link>https://im5tu.io/article/2016/12/write-good-code-not-code-hastily/</link>
      <pubDate>Wed, 21 Dec 2016 23:25:27 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2016/12/write-good-code-not-code-hastily/</guid>
      <description>&lt;p&gt;This article is a rework of a draft that I&amp;rsquo;ve had sitting in my drafts folder for a long while now. Over the last six months or so, I&amp;rsquo;ve been reviewing a lot more code than I had previously thanks in part to a promotion and in part, code reviewing applicants coding entries. Some of the code has been good, with some code, really not so good!
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; &lt;em&gt;Do everything in your power to not take the shortcut when writing code. It will bite you in the future.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am much the same as everybody else, there is room for improvement in my code - of that I&amp;rsquo;m sure. We are all limited by knowledge: not knowing what we don&amp;rsquo;t know. That&amp;rsquo;s one of the things I enjoy the most about what I do, learning how to do new things to make my life, and others lives, easier in the long run.&lt;/p&gt;

&lt;p&gt;One of the areas that I think 95% of developers can be better at doing is writing clean code. We&amp;rsquo;ve all heard of &lt;a href=&#34;https://cleancoders.com/&#34;&gt;Uncle Bob&lt;/a&gt;, so I won&amp;rsquo;t re-itterate him here. I&amp;rsquo;ve found that senior developers asking for Â£45,000 cannot recite the SOLID principals correctly (if at all), let alone use them in practise. I use the SOLID principals as one example, but in reality we are talking about clean and reusable code. Code anyone of any level can pickup and understand.&lt;/p&gt;

&lt;h2 id=&#34;on-haste&#34;&gt;On Haste&lt;/h2&gt;

&lt;p&gt;There comes a time in every project where you&amp;rsquo;re up against the clock for one reason or another. Deadline&amp;rsquo;s are coming up quickly and you still haven&amp;rsquo;t finished that module. What do you do? Do you write those unit tests later? Do you take that &amp;ldquo;quick and easy&amp;rdquo; shortcut.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s very easy to take the shortcut and get the work out on time. When you do this, you are deferring that effort until later. Except:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Later equals never&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So what happens when you keep deffering that effort until never? You and your team start to use the phrases like: &amp;ldquo;this needs a complete rewrite&amp;rdquo; or &amp;ldquo;we can&amp;rsquo;t do feature x because it wasn&amp;rsquo;t written in an extensible way&amp;rdquo;. These phrases should be massive red flags. They are a sign that too many shortcuts have been taken in the past which have now come to fruition.&lt;/p&gt;

&lt;p&gt;Back to the example, what should you do? There are a number of things that you can do, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ask for more time to do it properly,&lt;/li&gt;
&lt;li&gt;Attempt to descope some of the work,&lt;/li&gt;
&lt;li&gt;Stay late and put extra effort it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Typically, the first two options are likely your best approach before considering a shortcut or working late. I used often work later as a last resort, though it is something that I am not fond of in any shape or form. This typically means bad quoting/estimating/requirements gathering which is a little outside of scope for this article, so I&amp;rsquo;ll cover this topic in a future post.&lt;/p&gt;

&lt;p&gt;Clean coding can help in preventing us from reaching the situation described above. I gave some advice today, on this very subject, to a junior developer which I don&amp;rsquo;t think is repeated enough, in any form. I&amp;rsquo;ve given it before and i&amp;rsquo;ll give it countless times more:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Take the time and learn how to do it correctly. Practise doing it correctly until it&amp;rsquo;s second nature, even on current projects. You will become faster at it with time and be a better developer for it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Studying by itself is seldom enough. Learning is always best in context. The first few times you try something new, you will inevitably make mistakes. It&amp;rsquo;s natural to make mistakes when learning, we are human afterall. Think of learning like its an agile piece of work. Iterrate and improve (with the help of code reviews).&lt;/p&gt;

&lt;p&gt;Learning the core patterns &amp;amp; principals (eg: SOLID) may slow you down in the early stages of learning as you refer to learning material. However, don&amp;rsquo;t be put off by this. As your knowledege increases, you will be spending less time fighting your way through unreadable code whilst writing code that can be read by all skill levels. Code that is not readable slows everyone down. Yourself included, though you may not realise it at first.&lt;/p&gt;

&lt;h2 id=&#34;on-code-reviews&#34;&gt;On Code Reviews&lt;/h2&gt;

&lt;p&gt;One of the quickest ways to improve the code you&amp;rsquo;re writing is to have it reviewed. Reviews need to be a conscious effort by everyone in a team. How you do the review is up to you. A review can be two people sitting at a desk, or it can be an isolated review. Pick which strategy is best for you. It&amp;rsquo;s just important that it happens.&lt;/p&gt;

&lt;p&gt;Can a junior review a seniors code? Certainly, in my opinion. Juniors should be asking questions about the code and how it works. This forces a greater understanding in what has been written (on both sides) and the core  principals behind the code.&lt;/p&gt;

&lt;p&gt;One of the most common blockers to adopting code reviews is that they take too much time. If you are attempting to review a 3000 file changeset, then of course it will take time. But we must also be asking the question: why has it grown to a 3000 file changeset in the first place? The chances of missing an obvious mistake in a changeset grows exponentially with the size of the changeset. Reviewers get fatigued with large changesets. Where possible, try and keep the changeset small and have it reviewed more frequently by different people. The more eyes on the code, the better, generally.&lt;/p&gt;

&lt;p&gt;Code reviews exist for two primary reasons: to help people learn and catch the obvious mistakes. They should also be &lt;a href=&#34;https://slack.engineering/on-empathy-pull-requests-979e4257d158&#34;&gt;empathetic in nature&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;The scrutineers amongst you will have noticed that the sub-text to this article is all about preventing technical debt. Technical debt is a monster that accrues interest over time. One of the key ways to prevent that debt, is by writing clean code. We should be writing code as clean as we can. The more you write clean code, the quicker you will be at writing it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Your code is your legacy&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Technical Debt: How We Get It And How To Avoid It</title>
      <link>https://im5tu.io/article/2015/08/technical-debt-how-we-get-it-and-how-to-avoid-it/</link>
      <pubDate>Wed, 05 Aug 2015 18:37:26 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2015/08/technical-debt-how-we-get-it-and-how-to-avoid-it/</guid>
      <description>&lt;p&gt;This post started as a rebuttal to Ralf Westphal&amp;rsquo;s &lt;a href=&#34;http://geekswithblogs.net/theArchitectsNapkin&#34;&gt;blog&lt;/a&gt; and his post, &amp;ldquo;&lt;a href=&#34;http://geekswithblogs.net/theArchitectsNapkin/archive/2015/07/22/there-is-no-such-thing-as-technical-debt.aspx&#34;&gt;There is no such thing as technical debt&lt;/a&gt;&amp;rdquo;. There are many points of view on the subject covered by various people such as &lt;a href=&#34;https://sites.google.com/site/unclebobconsultingllc/a-mess-is-not-a-technical-debt&#34;&gt;Uncle Bob&lt;/a&gt; and &lt;a href=&#34;http://martinfowler.com/bliki/TechnicalDebt.html&#34;&gt;Martin Fowler&lt;/a&gt;, but I thought it might be insightful to show how my team manages our code base.&lt;/p&gt;

&lt;p&gt;I can see where Ralf is heading in his post, however, I don&amp;rsquo;t believe dissecting the financial analogy provides any benefit to the industry as a whole. As I will cover later, technical debt is a metaphor. Granted, one that can eventually be tracked to a monetary value yet negated quite substantially with proper management.&lt;/p&gt;

&lt;p&gt;To give you an idea of the code base I am currently working with, it primarily consists of large monolithic applications that have patchy test coverage and confused design patterns. All of this code was written by many people before me and added to by many others, all with typical enterprise constraints. I have personally added and fixed various parts of the code base, ensuring that I add tests as I go. As our team expands, we are attempting to modernise our code base by identifying services that we can extract into meso-services (services that are slightly larger than a micro-service) and clear our predecessors misgivings. We also have numerous greenfield projects that have been built from the ground up using modern best practises - TDD, agile, SOLID principals, DI, Composition etc.&lt;/p&gt;

&lt;p&gt;Before I talk about how we get into technical debt, I&amp;rsquo;d like to first remind you that technical debt is a metaphor. One that describes the engineering trade-offâs that software developers and business stakeholders must often make in order to meet schedules and customer expectations (&lt;a href=&#34;https://sites.google.com/site/unclebobconsultingllc/a-mess-is-not-a-technical-debt&#34;&gt;Uncle Bob&lt;/a&gt;). We can mistake the metaphor of technical debt with physical, measurable debt such as financial debt as demonstrated by Ralf.&lt;/p&gt;

&lt;h2 id=&#34;getting-into-debt&#34;&gt;Getting into debt&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s frighteningly easy to get yourself into technical debt, but a lot harder to get out of. The most common ways that I have seen so far in my career are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lack of knowledge&lt;/li&gt;
&lt;li&gt;Lack of time or resource (often driven by business)&lt;/li&gt;
&lt;li&gt;Not following best practises (eg: the SOLID principals)&lt;/li&gt;
&lt;li&gt;MVP&amp;rsquo;s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The lack of knowledge of any developer can be attributed to one of two things: the lack of effective experience (i.e.: not working on the same project for 5 years) and a lazy developer. Personally, I believe that if developers want to write better code, they will first find the time to learn more/read others code. If you&amp;rsquo;re too busy in the evening or feel demotivated after work, then try getting up earlier and doing it before your day becomes hectic - it&amp;rsquo;s about time management. It can be argued that junior developers are exempt from this and the responsibility of progressing them falls on to their technical lead(s)/senior developer(s). &lt;a href=&#34;https://twitter.com/smudge202&#34;&gt;Tommy Long&lt;/a&gt; quite accurately points out: &amp;ldquo;It is for Seniors to regularly, actively propogate knowledge to improve software development as a whole. Uncle Bob reckons we double in number of developers every 5 years right now. There is a tonne of shit mixed in with a few decent resources on the internet, juniors can&amp;rsquo;t go it alone.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Lack of time or resource is unfortunately bestowed upon us from the business, after all the business is king - without it we would not have a job. This is probably the sole cause for the technical debt that I currently repaying. The trade off&amp;rsquo;s that we have to make often start off small but over time snowball into a huge immovable problem - classic inertia. Therefore the responsibility falls on us as developers accurately estimate our work then let the business decide which work items will not make the deadline.&lt;/p&gt;

&lt;p&gt;Not following best practices is again, mostly the fault of the developer. At the end of the day, we, the developer write the code so it is our responsibility to write it properly. In the cases where business is the blocker, it is time that we as developers began to fight those long hard battles in our favour. This is the exact same thing that the developers at Microsoft have done. Their drive came from the bottom up, not top down.&lt;/p&gt;

&lt;p&gt;Lastly, MVP&amp;rsquo;s or minimally viable products. The concept is absolutely solid when combined with other practises such as TDD/BDD*. One of the key identifiers with this entrant is the question of: &amp;ldquo;Should I do this because of feature x which &lt;strong&gt;should&lt;/strong&gt; be coming in the next 3 weeks, but it will add half a day to the implementation?&amp;ldquo;. Note the emphasis on &lt;strong&gt;should&lt;/strong&gt;. A sprints backlog is volatile and subject to the abuse of the business at any given moment. If you keep the code as is, you run the risk of the feature costing more time in the future. On the contrary, the future feature may never be needed because of a changing requirement therefore saving you time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*I believe that all code should be tested, even if it is a prototype/MVP. You never know whether or not it will be used again. This is one major pain point of many that i&amp;rsquo;ve experienced recently as I&amp;rsquo;ve picked up legacy projects.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;when-technical-debt-is-too-high&#34;&gt;When technical debt is too high&lt;/h2&gt;

&lt;p&gt;There are a few signs of high technical debt, which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s hard to add new functionality&lt;/li&gt;
&lt;li&gt;The code resembles a spaghetti junction&lt;/li&gt;
&lt;li&gt;You cannot test your code effectively&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Typically, my first two points are attributed to developers not having enough knowledge or not following best practices. A prime example is if your class has more than a single responsibility such as it reads data from the database and contains business logic for validating a shopping basket. The example violates multiple principals and should make every developer feel like they&amp;rsquo;ve just jumped into a deep muddy puddle.&lt;/p&gt;

&lt;p&gt;By effectively testing your code, I mean that you should be able to write all types of test against the code you write: Unit, Component and Integration. If you can only write integration tests for the code you have just written, then you likely need to change your code - Unit testing a database layer (specifically the ORM, not physical IO) is usually quite trivial if the code is structured correctly. That said, we are often stopped from unit testing when using certain frameworks such as Microsoft Azure Service Bus due to the lack of abstractions the library provides. In this case, integration tests are often the best that we can do - but at least it is under test.&lt;/p&gt;

&lt;p&gt;The key point to make is that if your future self (or colleague) will have trouble maintaining the code you have just written, then we haven&amp;rsquo;t coded it well enough. If you have to write comments then you are probably doing it wrong - unless there is a concious design decision. &lt;a href=&#34;https://twitter.com/smudge202&#34;&gt;Tommy Long&lt;/a&gt; quite accurately reflects some of my own thoughts on comments in &lt;a href=&#34;http://blog.devbot.net/conventions-comments/#code&#34;&gt;his post about comments&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;strategies-to-avoid-high-levels-of-technical-debt&#34;&gt;Strategies to avoid high levels of technical debt&lt;/h2&gt;

&lt;p&gt;Here at &lt;a href=&#34;http://www.4com.co.uk&#34;&gt;4Com&lt;/a&gt;, we employ the following techniques to help us track how much technical debt we have and to help us mitigate it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The rule of 3&lt;/li&gt;
&lt;li&gt;The hallway test&lt;/li&gt;
&lt;li&gt;Issue tracking&lt;/li&gt;
&lt;li&gt;Sprint management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our rule of 3 is quite simple, once two out of three developers agree on a certain decision whether it be deciding on uptake of a new framework or naming an api, that decision is usually the one used. Usually one of the 3 is our manager/technical lead who often plays the role of devils advocate in this scenario. Any person of the 3 can play the role of devils advocate. The rule of 3 helps other members of the team understand the thought processes and context for the decision - something that is often missed when developers leave. It also helps to quickly highlight any major problems based on past experiences. If the situation warrants it, a spike can be performed to further evaluate the decision. While the rule of 3 is extremely helpful for larger architectural decisions, often a simpler approach can be used which negates the resource requirements: The hallway test.&lt;/p&gt;

&lt;p&gt;The hallway test is a phrase that I picked up off the folks at Microsoft. The basic premise is that a random developer should be able to understand and logically follow the code/api without documentation. Often the random will not have domain knowledge, which can make them perfect to bounce ideas off of. Sometimes, domain knowledge will be required - but the point is to bounce/review the idea with another developer which often leads to a cleaner/simpler design; thus, lowering the debt raised.&lt;/p&gt;

&lt;p&gt;If we have made a shortcut for an MVP or have identified a piece of legacy code that can be tied up, the first thing we do is raise an issue within JIRA - our issue tracking platform. The reason for this is that we can assign it a priority and discuss whether or not it blocks future functionality/reduce time of implementation. Often the items might be small and can be added to a sprint if the focus of the sprint has already been completed (eg: 2 hours to go before the end of the sprint and the work is all done). Whilst this isn&amp;rsquo;t a way to avoid technical debt, it helps you to keep track of it and realise when you have too much debt that you need to repay.&lt;/p&gt;

&lt;p&gt;Before each sprint, we asses the priorities of the business against our current backlog. Once the main priorities have been assigned work items within the sprint, we fill up the remaining space with technical debt. The order in which technical debt and features are tackled within a sprint depends on the business priorities. For example: feature/improvement A must be completed at all costs. As my colleague HerecyDev points out, you should be completing all work within a sprint and not over-committing. I personally favour tackling features first so the business gains value, unless tackling a piece of technical debt can improve the efficiency of implementing a feature. It might not always be possible to add technical debt every sprint, but so long as that is the minority of cases you should be perfectly fine.&lt;/p&gt;

&lt;p&gt;With legacy projects, the primary focus should be getting unit tests in place (this might start as an integration test). This ensures that you will not break any existing functionality while you make the code better and flag work items for the future.&lt;/p&gt;

&lt;h3 id=&#34;closing-words&#34;&gt;Closing words&lt;/h3&gt;

&lt;p&gt;In his post, Ralf mentions that tackling technical debt is an addiction with the basic argument the business will keep postponing doing the right thing. If left unmanaged this is entirely true until it becomes a point where it is too costly to implement a feature. The key is the business will decide this. At &lt;a href=&#34;http://www.4com.co.uk&#34;&gt;4Com&lt;/a&gt;, we continuously flag items as technical debt for review at every sprint planning meeting. I firmly believe that if we didn&amp;rsquo;t, we wouldn&amp;rsquo;t have the same high standards in our code base as we do today.&lt;/p&gt;

&lt;p&gt;In short, we should always leave the code in a better place than when we found it - never worse and raise an issue if there is something that could be done better. That&amp;rsquo;s what I believe the metaphor is for - something that we can do better within our code.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>