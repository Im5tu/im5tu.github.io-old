<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>moq on Stuart Blackler's Blog</title><link>https://im5tu.io/tags/moq/</link><description>Recent content in moq on Stuart Blackler's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 28 Nov 2020 12:39:52 +0000</lastBuildDate><atom:link href="https://im5tu.io/tags/moq/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Moq with ref, in and out parameters in C#</title><link>https://im5tu.io/article/2020/11/using-moq-with-ref-in-and-out-parameters-in-c/</link><pubDate>Sat, 28 Nov 2020 12:39:52 +0000</pubDate><guid>https://im5tu.io/article/2020/11/using-moq-with-ref-in-and-out-parameters-in-c/</guid><description>&lt;p>In this article, I want to take a look at a scenario that I came across this week which I&amp;rsquo;ve come across a few times. Occasionally, you will have an interface that you wish to mock out with Moq and find you have troubles because the method signature takes a &lt;code>ref&lt;/code> or an &lt;code>out&lt;/code> parameter. This week, I&amp;rsquo;ve found a way that we can successfully mock the method without too much of a change to the test code.&lt;/p></description></item></channel></rss>