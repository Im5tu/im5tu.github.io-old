<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vb on Stuart Blackler&#39;s Blog</title>
    <link>https://im5tu.io/tags/vb/index.xml</link>
    <description>Recent content in Vb on Stuart Blackler&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://im5tu.io/tags/vb/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>OpenMessage 2017 Roadmap</title>
      <link>https://im5tu.io/article/2017/02/openmessage-2017-roadmap/</link>
      <pubDate>Sat, 11 Feb 2017 12:15:27 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2017/02/openmessage-2017-roadmap/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/im5tu/openmessage&#34;&gt;OpenMessage&lt;/a&gt; originally started out as a replacement for an internal library that was used across teams. At the time, the team I was apart of needed the latest version of dotnet core for the library where as the other team were stuck on RC1. They were also developing features for that version of the framework and a few pre-existing details that we were unhappy with (eg: the request/response implementation). With that in mind, I created a minimal wrapper for what we needed. Looking forward, I plan to dedicate a bit more time to the project and improve it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;support-for-web-hook-scenarios&#34;&gt;Support for web hook scenarios&lt;/h2&gt;

&lt;p&gt;This is probably one of the bigger ideas that I have had in mind for the last month or so purely for the power that it could bring to applications. One of the core parts of our infrastructure was taking a web request generated by an external system and translating this into a message to be placed on Azure Service Bus. I see two main parts to this functionality:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Support for incomming web hooks&lt;/li&gt;
&lt;li&gt;Support for sending web hooks&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For each portion, the framework will need to consider whether or not to send/receive to/from unique endpoints or an endpoint per message. Initially, this will be decided at composition, but may be extended to dynamic re-configuration at a later stage (which will need to be considered throughout the framework). I intend to use some lightweight routing to do this, probably using the routing module from ASP.Net core, at least, initialy.&lt;/p&gt;

&lt;h2 id=&#34;support-for-additional-providers&#34;&gt;Support for additional providers&lt;/h2&gt;

&lt;p&gt;The more providers that the project has, the more flexibility you can have inside of your applications. The main providers that I have in mind are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Azure Event Hubs&lt;/li&gt;
&lt;li&gt;Service Fabric Reliable Queues&lt;/li&gt;
&lt;li&gt;Rabbit MQ&lt;/li&gt;
&lt;li&gt;In Memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There isn&amp;rsquo;t really too much to say about each of the above, except that the project will have support for each framework using the native providers. I did toy with the idea of building a complete AMQP library as part of this, but that seems a little overkill for the time being. I&amp;rsquo;ll see how the progression of libraries moving to dotnet core takes shape as another full library is quiet the undertaking.&lt;/p&gt;

&lt;h2 id=&#34;sample-creation-tutorial-series&#34;&gt;Sample creation/tutorial series&lt;/h2&gt;

&lt;p&gt;One of the big pieces that is missing at the moment are public samples of how to use the project in your application. This will help ease the onboarding process for new users/developers.&lt;/p&gt;

&lt;p&gt;Naturally, as part of all of this work, the dependencies will be kept up-to-date &amp;amp; bugs fixed. If there is something that you&amp;rsquo;d like to see, create an issue on &lt;a href=&#34;https://github.com/im5tu/openmessage&#34;&gt;github&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/im5tu&#34;&gt;tweet me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Messaging!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenMessage 1.1 Released</title>
      <link>https://im5tu.io/article/2017/02/openmessage-1.1-released/</link>
      <pubDate>Sun, 05 Feb 2017 15:31:54 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2017/02/openmessage-1.1-released/</guid>
      <description>&lt;p&gt;Just a quick update to say that the Azure provider for &lt;a href=&#34;https://github.com/Im5tu/OpenMessage&#34;&gt;OpenMessage&lt;/a&gt; has been released. This update fixes an issue with scheduling messages on topics.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;As part of this update, the entire solution has been converted to the new (old) csproj system as part of Visual Studio 2017. Over the next few days i&amp;rsquo;ll be posting the roadmap for the project and where I plan to take it next. Feedback and ideas are welcome.&lt;/p&gt;

&lt;p&gt;If you experience any problems, let me know.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Semaphore vs SeamphoreSlim Micro Benchmark</title>
      <link>https://im5tu.io/article/2013/03/semaphore-vs-seamphoreslim-micro-benchmark/</link>
      <pubDate>Mon, 11 Mar 2013 18:06:28 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2013/03/semaphore-vs-seamphoreslim-micro-benchmark/</guid>
      <description>&lt;p&gt;In this post, I am going to show a small micro-benchmark to demonstrate the performance difference between the &lt;code&gt;Semaphore&lt;/code&gt; and &lt;code&gt;SemaphoreSlim&lt;/code&gt; classes in C#. A &lt;code&gt;Semaphore&lt;/code&gt; is often used to restrict the number of threads than can access some (physical or logical) resource. In this case, we want the restriction to be as little as possible.
&lt;/p&gt;

&lt;p&gt;Semaphores are of two types: local semaphores and named system semaphores. If you create a Semaphore object using a constructor that accepts a name, it is associated with an operating-system semaphore of that name. Named system semaphores are visible throughout the operating system, and can be used to synchronize the activities of processes. You can create multiple Semaphore objects that represent the same named system semaphore, and you can use the OpenExisting method to open an existing named system semaphore. &lt;em&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-gb/library/system.threading.semaphore.aspx&#34;&gt;Source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A local semaphore exists only within your process. It can be used by any thread in your process that has a reference to the local Semaphore object. Each Semaphore object is a separate local semaphore. &lt;em&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-gb/library/system.threading.semaphore.aspx&#34;&gt;Source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The machine that I am using for this benchmark is a Intel core i3, clocked at 4ghz with 4GB DDR3 ram running Windows 7 x64 SP1 and .Net Framework 4.5.&lt;/p&gt;

&lt;p&gt;In order to begin the test, I created a new console application and imported the BMark package from the &lt;a href=&#34;https://nuget.org/packages/BMark/&#34;&gt;NuGet&lt;/a&gt; repository. Next, I added the following code to the application as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const Int32 count = 106;

Semaphore regularSemaphore = new Semaphore(count, count);
SemaphoreSlim slimSemaphore = new SemaphoreSlim(count, count);

UInt64 amountToRun = (UInt64)(count - PerformanceTester.PreRunAmount - 2);

PerformanceTester.Run(&amp;quot;Semaphore.WaitOne&amp;quot;, amountToRun, () =&amp;gt; { regularSemaphore.WaitOne(); });
PerformanceTester.Run(&amp;quot;Semaphore.Release&amp;quot;, amountToRun, () =&amp;gt; { regularSemaphore.Release(); });
PerformanceTester.Run(&amp;quot;SemaphoreSlim.WaitOne&amp;quot;, amountToRun, () =&amp;gt; { slimSemaphore.Wait(); });
PerformanceTester.Run(&amp;quot;SemaphoreSlim.Release&amp;quot;, amountToRun, () =&amp;gt; { slimSemaphore.Release(); });

Console.WriteLine(PerformanceTester.GetResults());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, the &lt;code&gt;PerformanceTester&lt;/code&gt; will run each test 4 times before starting the actual timed test. Since we are dealing with a blocking resource, I added some extra capacity so that the test would not block at any point. When the code is run in release mode without the debugger, the output of the program is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Semaphore.WaitOne:         0.09ms    NumberOfSamples: 100
Semaphore.Release:         0.05ms    NumberOfSamples: 100
SemaphoreSlim.WaitOne:     0.01ms    NumberOfSamples: 100
SemaphoreSlim.Release:     0.01ms    NumberOfSamples: 100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the results show, the &lt;code&gt;SemaphoreSlim&lt;/code&gt; class is a tiny bit quicker. After testing this myself earlier, I thought that others could run this themselves and hopefully receive a small increase in performance in their applications. The reason for the performance increase is because the &lt;code&gt;SemaphoreSlim&lt;/code&gt; class provides a lightweight alternative to the &lt;code&gt;Semaphore&lt;/code&gt; class that doesn&amp;rsquo;t use Windows kernel semaphores.&lt;/p&gt;

&lt;p&gt;In essence, if you do not need a named &lt;code&gt;Semaphore&lt;/code&gt;, use the &lt;code&gt;SemaphoreSlim&lt;/code&gt; class.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flicker free forms and listview in .Net</title>
      <link>https://im5tu.io/article/2012/12/flicker-free-forms-and-listview-in-.net/</link>
      <pubDate>Sun, 30 Dec 2012 14:51:38 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2012/12/flicker-free-forms-and-listview-in-.net/</guid>
      <description>&lt;p&gt;On a project I have been working on recently, I came across a problem where under Windows an Mdi Child form would flicker when it loads. Trying to find information on what was the cause of this was near impossible. I ended up trying a lot of code snippets that I found when googling the problem and this is what I have come up with.
&lt;/p&gt;

&lt;p&gt;Next up, the code. Following this I shall explain, to the best of my ability, what the code does:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;  VB
    Protected Overrides ReadOnly Property CreateParams() As System.Windows.Forms.CreateParams
        Get
            Dim cp As CreateParams = MyBase.CreateParams
            cp.ExStyle = cp.ExStyle Or &amp;amp;H2000000
            Return cp
        End Get
    End Property
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apparently there are two causes for the flicker that happens to a Windows form. Until writing this post I did not know of the reasons why. &lt;em&gt;&lt;a href=&#34;http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/aaed00ce-4bc9-424e-8c05-c30213171c2c/&#34;&gt;Source MSDN
Forums&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;em&gt;Windows sends a control two messages when a control needs to be painted. The first one (&lt;code&gt;WM_ERASEBKGND&lt;/code&gt;) causes the background to be painted (&lt;code&gt;OnPaintBackground&lt;/code&gt;), the second causes the foreground to be painted (&lt;code&gt;WM_PAINT&lt;/code&gt;, firing &lt;code&gt;OnPaint&lt;/code&gt;). Seeing the background drawn first, then the foreground is noticeable when the drawing is slow. Windows Forms has a ready solution for this kind of flicker with ControlStyles.OptimizedDoubleBuffer.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; &lt;em&gt;A form that has a lot of controls takes a long time to paint. Especially the Button control in its default style is expensive. Once you get over 50 controls, it starts getting noticeable. The Form class
paints its background first and leaves &amp;ldquo;holes&amp;rdquo; where the controls need to go. Those holes are usually white, black when you use the &lt;code&gt;Opacity&lt;/code&gt; or &lt;code&gt;TransparencyKey property&lt;/code&gt;. Then each control gets painted, filling
in the holes. The visual effect is ugly and there&amp;rsquo;s no ready solution for it in Windows Forms. &lt;code&gt;Double-buffering&lt;/code&gt; can&amp;rsquo;t solve it as it only works for a single control, not a composite set of controls.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;CreateParams&lt;/code&gt; property should only be overridden when wrapping an existing Windows control or when you need to set the style of the control. Microsoft recommend that you inherit the problem control and
then override the &lt;code&gt;CreateParams&lt;/code&gt;, not the way that I actually used it.&lt;/p&gt;

&lt;p&gt;I applied this at the top of every form in my code, ran the code under Windows 7 (my development machine) and Windows XP (the target machine) and everything appeared to render a lot better with the nasty double
flicker gone. All I know about the code above, is that it overrides the styling of the controls and waits until the form is fully painted before showing the form.&lt;/p&gt;

&lt;p&gt;It wasn&amp;rsquo;t until further testing of the code that I discovered that the original code caused an MDI child form to max out the CPU and hang the application. I tried commenting out all of the code, removing any
background threads that were running (including timers etc) and as soon as I enabled the code, it would hang the application again. This left me and my colleagues very stumped for a few hours. After this period of
time, I bit the bullet and decided to uncomment every section of my code until I could find the problem.&lt;/p&gt;

&lt;p&gt;Eventually I found the code above to be the problem, which worked fine under Windows 7. So the solution was quiet easy, detect what version of the operating system we are on and only apply the style if we are on
Vista or higher.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;  VB
    Protected Overrides ReadOnly Property CreateParams() As System.Windows.Forms.CreateParams
        Get
            Dim cp As CreateParams = MyBase.CreateParams
            Dim OSVer As Version = System.Environment.OSVersion.Version()
            Select Case OSVer.Major
                Case Is &amp;lt;= 5
                Case 5
                    If OSVer.Minor &amp;gt; 0 Then
                        cp.ExStyle = cp.ExStyle Or &amp;amp;H2000000
                    End If
                Case Is &amp;gt; 5
                    cp.ExStyle = cp.ExStyle Or &amp;amp;H2000000
                Case Else
            End Select
            Return cp
        End Get
    End Property
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I had finally fixed the problem with the CPU usage. Deployed the version for the client to test and everything was ok. By this time, I had a massive headache and it wasn&amp;rsquo;t quiet the end of the day. What a
better way to end the day but by ending off with another rending issue. Although I had fixed the issue with the CPU, I had noticed that when you moved the form, and loading the form in some cases, a list view in
details mode would not render correctly.&lt;/p&gt;

&lt;p&gt;After reading around about the issue, I have merged from a number of source&amp;rsquo;s to create a flicker free list view. To use the code, place the class into your project, open up the target form&amp;rsquo;s designer code (&lt;em&gt;You
will need to show all files in VS&lt;/em&gt;) and replace the instances of &lt;code&gt;ListView&lt;/code&gt; with &lt;code&gt;FlickerFreeListView&lt;/code&gt;. Here is the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Public Class FlickerFreeListView
    Inherits System.Windows.Forms.ListView

    Public Sub New()

        MyBase.New()

        Me.SetStyle(ControlStyles.Opaque, True)
        Me.SetStyle(ControlStyles.OptimizedDoubleBuffer, True)
        Me.SetStyle(ControlStyles.ResizeRedraw, True)
        Me.SetStyle(ControlStyles.AllPaintingInWmPaint, True)
        Me.SetStyle(ControlStyles.EnableNotifyMessage, True)

    End Sub

    Protected Overrides Sub OnNotifyMessage(ByVal m As Message)
        If (m.Msg &amp;lt;&amp;gt; &amp;amp;H14) Then
            MyBase.OnNotifyMessage(m)
        End If
    End Sub

End Class
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code basically blocks the background from being re-drawn every time an item is added into the &lt;code&gt;ListView&lt;/code&gt; control. It also sets the &lt;code&gt;OptimizedDoubleBuffer&lt;/code&gt; to help prevent any issues, amongst other things.&lt;/p&gt;

&lt;p&gt;I hope that this will help someone have less of a headache that I had when I was looking around for a solution to this problem. Feel free to try it at your own risk and notify me if you have any
troubles.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Extension methods in dotnet</title>
      <link>https://im5tu.io/article/2012/12/extension-methods-in-dotnet/</link>
      <pubDate>Sat, 01 Dec 2012 17:51:38 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2012/12/extension-methods-in-dotnet/</guid>
      <description>&lt;p&gt;In this article we will take a look at what extension methods are and how to use them in .Net. Personally, they are one of the best things that has been introduced into the .Net framework in terms of readability. I will take you through what extension methods are, how to create them (in c# and vb) then I will show you some of the extension methods that I have created (in c# only, conversion is for you to try).
&lt;/p&gt;

&lt;h2 id=&#34;contents&#34;&gt;Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What are extension methods?&lt;/li&gt;
&lt;li&gt;How do we create extension methods?&lt;/li&gt;
&lt;li&gt;Examples of extension methods&lt;/li&gt;
&lt;li&gt;Related Links&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;what-are-extension-methods&#34;&gt;What are extension methods?&lt;/h3&gt;

&lt;p&gt;Extension methods allow you to easily extend a type, such as an integer or string, without re-compiling or modifying the type. In essence, they are a type of &lt;code&gt;static&lt;/code&gt; (&lt;code&gt;shared&lt;/code&gt; in vb) method, but they are called as
if the method is native to the type. Extension methods are available from the 3.5 version of the .Net Framework and can be implemented on any type in the .Net framework or any custom type that you define.&lt;/p&gt;

&lt;p&gt;One downside to extension methods is if that you create an extension method with the same name as another method in that type, the compiler will bind the method call to the native method not any extension. An
extension method is only called when there is no native method found.&lt;/p&gt;

&lt;h4 id=&#34;warning&#34;&gt;Warning&lt;/h4&gt;

&lt;p&gt;If you declare an extension method on the type Object, you will effectively create the extension method for every type in the framework including but not limited to String, Integer and Lists.&lt;/p&gt;

&lt;h3 id=&#34;how-do-we-create-extension-methods&#34;&gt;How do we create extension methods?&lt;/h3&gt;

&lt;p&gt;The basic outline of a creating extension methods goes something like this:&lt;/p&gt;

&lt;p&gt;​1. Create a public &lt;code&gt;static&lt;/code&gt; class (&lt;code&gt;module&lt;/code&gt; in vb) &lt;br /&gt;
 2. Define functions that you wish to perform&lt;br /&gt;
 3. Make the functions an extension method&lt;/p&gt;

&lt;p&gt;Following through a complete example, I will now demonstrate how to create an extension method that returns the first 3 characters of a string. Using the list above, I must first create a &lt;code&gt;static class&lt;/code&gt; or
&lt;code&gt;module&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // C#
    public static class Extensions
    {

    }

    &#39; VB
    Module Extenstions

    End Module
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next phase would be to write the function that we are going need, which in this case is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // C#
    public static class Extensions
    {
        public string GetFirstThreeCharacters(String str)
        {
            if(str.Length &amp;lt; 3)
            {
                return str;
            }
            else
            {
                return str.Substring(0,3);
            }
        }
    }

    &#39; VB
    Module Extenstions

    Public Function GetFirstThreeCharacters(Byval str As String) As String
        If (str.Length &amp;lt; 3) Then
            return str
        Else
            return str.SubString(0,3)
        End If
    End Function

    End Module
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far, we have done nothing special. In the last phase is to make the functions extension methods. It is slightly more complicated in VB but not by much. I will deal with C# first.&lt;/p&gt;

&lt;p&gt;To make our C# version of our function an extension method we need to mark the function as static (so that it can be accessed at any time with out the need for declaring anything) and secondly, marking the first
paramter with the &lt;code&gt;this&lt;/code&gt; keyword. This keyword basically tells the CLR that when this extension method is called, to use &amp;ldquo;this&amp;rdquo; parameter as the source. See the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public static class Extensions
    {
        public static string GetFirstThreeCharacters(this String str)
        {
            if(str.Length &amp;lt; 3)
            {
                return str;
            }
            else
            {
                return str.Substring(0,3);
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now for the VB version. Instead of using the &lt;code&gt;this&lt;/code&gt; keyword, we need to do something slightly different. We need to mark the function with the &lt;code&gt;System.Runtime.CompilerServices.Extension&lt;/code&gt; attribute like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;System.Runtime.CompilerServices.Extension&amp;gt; _
    Public Function GetFirstThreeCharacters(Byval str As String) As String
        If str.Length &amp;lt; 3 Then
                Return str
        Else
                Return str.Substring(0, 3)
        End If
    End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you copy this code into any project, you should be able to call it like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // C#
    String str = &amp;quot;my new String&amp;quot;;
    str = str.GetFirstThreeCharacters();

    &#39; VB
    Dim str as String = &amp;quot;my new String&amp;quot;
    str = str.GetFirstThreeCharacters()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As I explained for both languages above, the effective use of the &lt;code&gt;this&lt;/code&gt; keyword, makes the CLR take what ever we are calling the extension method from as the first parameter to our function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: Try adding an additional &lt;code&gt;Integer&lt;/code&gt; parameter and using that as a replacement for the 0 in the code above.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;examples-of-extension-methods&#34;&gt;Examples of extension methods&lt;/h3&gt;

&lt;p&gt;Here are a few of the extensions that I have found or created over time. These are helpful to me and I hope they are to you as well. If you have a question about any of these, drop me a comment below.&lt;/p&gt;

&lt;h4 id=&#34;haselements&#34;&gt;HasElements&lt;/h4&gt;

&lt;p&gt;Something that I often do is check a collection for a value. This method is designed to prevent me constantly checking for a null value and existance of any item in a given collection. This method will work on any collection that implents the &lt;code&gt;ICollection&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definition:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /// &amp;lt;summary&amp;gt;
   /// Determines whether the specified collection has any elements in the sequence. This method also checks for a null collection.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;items&amp;quot;&amp;gt;The ICollection of items to check.&amp;lt;/param&amp;gt;
    public static bool HasElements(this ICollection items)
    {
        return items != null &amp;amp;&amp;amp; items.Count &amp;gt; 0;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Example usage:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    List&amp;lt;String&amp;gt; myList = new List&amp;lt;String&amp;gt;();
    if (myList.HasElements())
    {
        // do some code
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;isbetween&#34;&gt;IsBetween&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;IsBetween&lt;/code&gt; method returns a boolean and determins whether or not a value is between an inclusive upper and lower boundry. This will only work on types that implement the &lt;code&gt;IComparable&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definition:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /// &amp;lt;summary&amp;gt;
    /// Determins whether a value is between a minimum and maximum value.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;The type of the value parameter.&amp;lt;/typeparam&amp;gt;
    /// &amp;lt;param name=&amp;quot;value&amp;quot;&amp;gt;The value that needs to be checked.&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;low&amp;quot;&amp;gt;The inclusive lower boundry.&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;high&amp;quot;&amp;gt;The inclusive upper boundry.&amp;lt;/param&amp;gt;
    public static bool IsBetween&amp;lt;T&amp;gt;(this T value, T low, T high) where T : IComparable&amp;lt;T&amp;gt;
    {
        return value.CompareTo(low) &amp;gt;= 0 &amp;amp;&amp;amp; value.CompareTo(high) &amp;lt;= 0;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Example usage:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Int32 myInt = 0;
    myInt.IsBetween(0, 5); // returns true
    myInt.IsBetween(1, 5); // returns false
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;each&#34;&gt;Each&lt;/h4&gt;

&lt;p&gt;Quite often I have to perform a task on a collection of items. This is just a shortcut way for saying for each element in the collection, perform this action. This will work on any collection that implements
the &lt;code&gt;ICollection&lt;/code&gt; interface. The action that is parsed in can be a lambda expression or a function/subroutine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definition:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /// &amp;lt;summary&amp;gt;
    /// Executes the given action against the given ICollection instance.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;The type of the ICollection parameter.&amp;lt;/typeparam&amp;gt;
    /// &amp;lt;param name=&amp;quot;items&amp;quot;&amp;gt;The collection the action is performed against.&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;action&amp;quot;&amp;gt;The action that is performed on each item.&amp;lt;/param&amp;gt;
    public static void Each&amp;lt;T&amp;gt;(this ICollection&amp;lt;T&amp;gt; items, Action&amp;lt;T&amp;gt; action)
    {
        foreach (T item in items)
        {
            action(item);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Example usage:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    List&amp;lt;String&amp;gt; myList = new List&amp;lt;String&amp;gt;();
    myList.Each(el =&amp;gt; 
    {
        // perform an action(s) on the item
        el.Substring(0,1);
        el = el;
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;in&#34;&gt;In&lt;/h4&gt;

&lt;p&gt;Often it is neccessary to determine whether a value is in a set collection. For example, I need to check whether a string is in an allowed list. This method will allows us to check any value against an
array of values of the same type.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definition:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /// &amp;lt;summary&amp;gt;
    /// Determines whether a parameter is in a given list of parameters. Eg. 11.In(1,2,3) will return false.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;The type of the source parameter.&amp;lt;/typeparam&amp;gt;
    /// &amp;lt;param name=&amp;quot;source&amp;quot;&amp;gt;The item that needs to be checked.&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;list&amp;quot;&amp;gt;The list that will be checked for the given source.&amp;lt;/param&amp;gt;
    public static bool In&amp;lt;T&amp;gt;(this T source, params T[] list)
    {
        if (null == source) throw new ArgumentNullException(&amp;quot;source&amp;quot;);
        return list.Contains(source);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Example usage:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Int32 myInt = 0;
    myInt.In(0, 0, 1, 2, 3); // returns true
    myInt.In(1, 5, 6, 7, 8); // returns false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully, you now have an understanding of how to implement extension methods in both C# and VB.Net.&lt;/p&gt;

&lt;h3 id=&#34;related-links&#34;&gt;Related Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb383977.aspx&#34;&gt;MSDN: Extension Methods (C# Programming
Guide)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.extensionmethod.net/&#34;&gt;Example of extension methods
(&lt;/a&gt;&lt;a href=&#34;http://www.extensionmethod.net/&#34;&gt;http://www.extensionmethod.net/)&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>