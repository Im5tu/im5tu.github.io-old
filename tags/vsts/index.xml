<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vsts on Stuart Blackler's Blog</title><link>https://im5tu.io/tags/vsts/</link><description>Recent content in vsts on Stuart Blackler's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 26 Dec 2018 14:00:00 +0000</lastBuildDate><atom:link href="https://im5tu.io/tags/vsts/index.xml" rel="self" type="application/rss+xml"/><item><title>Quick Tip: Accessing a Azure DevOps secret from within a scripted step</title><link>https://im5tu.io/article/2018/12/quick-tip-accessing-a-azure-devops-secret-from-within-a-scripted-step/</link><pubDate>Wed, 26 Dec 2018 14:00:00 +0000</pubDate><guid>https://im5tu.io/article/2018/12/quick-tip-accessing-a-azure-devops-secret-from-within-a-scripted-step/</guid><description>&lt;p>In today&amp;rsquo;s quick tip, we are going to see how we can access a secret that we&amp;rsquo;ve defined in a variable group as part of a Azure DevOps yml based build.&lt;/p></description></item><item><title>Building a custom build agent image with Docker and Azure DevOps pipelines</title><link>https://im5tu.io/article/2018/12/building-a-custom-build-agent-image-with-docker-and-azure-devops-pipelines/</link><pubDate>Mon, 24 Dec 2018 14:00:00 +0000</pubDate><guid>https://im5tu.io/article/2018/12/building-a-custom-build-agent-image-with-docker-and-azure-devops-pipelines/</guid><description>&lt;p>In this article, we will learn how to use a custom dockerfile as the bases for a customised Azure DevOps build agent. There are many reasons why you might want to do this, including running custom tooling that takes a while to setup or tooling that isn&amp;rsquo;t supported yet.&lt;/p></description></item><item><title>Building Service Fabric Apps With VSTS YML Build Definitions</title><link>https://im5tu.io/article/2018/06/building-service-fabric-apps-with-vsts-yml-build-definitions/</link><pubDate>Sat, 30 Jun 2018 19:40:00 +0100</pubDate><guid>https://im5tu.io/article/2018/06/building-service-fabric-apps-with-vsts-yml-build-definitions/</guid><description>In my previous article, we setup a standarised build using the new YML build definitions within VSTS, using the .Net CLI tooling. In this article, we will use the same setup as our base, but we will build and publish a service fabric application.
Our sample build file has the following steps:
Clean Sources Install the Dotnet CLI Restore Packages Build Projects Test Projects Publish the Web App Publish Build Artifacts Tag VSTS Build For our service fabric build, we will need the following steps:</description></item><item><title>Automated Builds in VSTS with YML Build Definitions</title><link>https://im5tu.io/article/2018/06/automated-builds-in-vsts-with-yml-build-definitions/</link><pubDate>Sun, 17 Jun 2018 21:35:00 +0100</pubDate><guid>https://im5tu.io/article/2018/06/automated-builds-in-vsts-with-yml-build-definitions/</guid><description>In this article we will explore a preview feature inside of Visual Studio Team Services (VSTS) called YML Build Definitions. In essence, this allows you to change your build process from a .yml file in your git repository much in the same way as you can do with other services such as AppVeyor. During the article, we will setup a build definition for an Aspnet Core website.
Prerequisites Before we take a look at the struture of the file, you will need to complete the following tasks:</description></item></channel></rss>