<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotnetcore on Stuart Blackler&#39;s Blog</title>
    <link>https://im5tu.io/tags/dotnetcore/</link>
    <description>Recent content in dotnetcore on Stuart Blackler&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Jul 2018 16:40:00 +0100</lastBuildDate>
    
	<atom:link href="https://im5tu.io/tags/dotnetcore/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Utf8Json Media Formatters for ASP.Net Core</title>
      <link>https://im5tu.io/article/2018/07/utf8json-media-formatters-for-asp.net-core/</link>
      <pubDate>Sun, 29 Jul 2018 16:40:00 +0100</pubDate>
      
      <guid>https://im5tu.io/article/2018/07/utf8json-media-formatters-for-asp.net-core/</guid>
      <description>Recently, I have been looking at the Utf8Json project and evaluating for use in our high performance payments API. Looking at the benchmarks on the Github page, and running my own benchmarks, the numbers stated seemed to tally up, so I built a few media formatters for aspnet core.
Now, the project does already ship with some media formatters as a separate nuget package. However, I wanted to improve the following things:</description>
    </item>
    
    <item>
      <title>Building Service Fabric Apps With VSTS YML Build Definitions</title>
      <link>https://im5tu.io/article/2018/06/building-service-fabric-apps-with-vsts-yml-build-definitions/</link>
      <pubDate>Sat, 30 Jun 2018 19:40:00 +0100</pubDate>
      
      <guid>https://im5tu.io/article/2018/06/building-service-fabric-apps-with-vsts-yml-build-definitions/</guid>
      <description>In my previous article, we setup a standarised build using the new YML build definitions within VSTS, using the .Net CLI tooling. In this article, we will use the same setup as our base, but we will build and publish a service fabric application.
Our sample build file has the following steps:
 Clean Sources Install the Dotnet CLI Restore Packages Build Projects Test Projects Publish the Web App Publish Build Artifacts Tag VSTS Build  For our service fabric build, we will need the following steps:</description>
    </item>
    
    <item>
      <title>Automated Builds in VSTS with YML Build Definitions</title>
      <link>https://im5tu.io/article/2018/06/automated-builds-in-vsts-with-yml-build-definitions/</link>
      <pubDate>Sun, 17 Jun 2018 21:35:00 +0100</pubDate>
      
      <guid>https://im5tu.io/article/2018/06/automated-builds-in-vsts-with-yml-build-definitions/</guid>
      <description>In this article we will explore a preview feature inside of Visual Studio Team Services (VSTS) called YML Build Definitions. In essence, this allows you to change your build process from a .yml file in your git repository much in the same way as you can do with other services such as AppVeyor. During the article, we will setup a build definition for an Aspnet Core website.
Prerequisites Before we take a look at the struture of the file, you will need to complete the following tasks:</description>
    </item>
    
  </channel>
</rss>