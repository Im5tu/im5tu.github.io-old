<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Stuart Blackler&#39;s Blog</title>
    <link>https://im5tu.io/article/index.xml</link>
    <description>Recent content in Articles on Stuart Blackler&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Feb 2017 12:15:27 +0000</lastBuildDate>
    <atom:link href="https://im5tu.io/article/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>OpenMessage 2017 Roadmap</title>
      <link>https://im5tu.io/article/2017/02/openmessage-2017-roadmap/</link>
      <pubDate>Sat, 11 Feb 2017 12:15:27 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2017/02/openmessage-2017-roadmap/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/im5tu/openmessage&#34;&gt;OpenMessage&lt;/a&gt; originally started out as a replacement for an internal library that was used across teams. At the time, the team I was apart of needed the latest version of dotnet core for the library where as the other team were stuck on RC1. They were also developing features for that version of the framework and a few pre-existing details that we were unhappy with (eg: the request/response implementation). With that in mind, I created a minimal wrapper for what we needed. Looking forward, I plan to dedicate a bit more time to the project and improve it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;support-for-web-hook-scenarios&#34;&gt;Support for web hook scenarios&lt;/h2&gt;

&lt;p&gt;This is probably one of the bigger ideas that I have had in mind for the last month or so purely for the power that it could bring to applications. One of the core parts of our infrastructure was taking a web request generated by an external system and translating this into a message to be placed on Azure Service Bus. I see two main parts to this functionality:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Support for incomming web hooks&lt;/li&gt;
&lt;li&gt;Support for sending web hooks&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For each portion, the framework will need to consider whether or not to send/receive to/from unique endpoints or an endpoint per message. Initially, this will be decided at composition, but may be extended to dynamic re-configuration at a later stage (which will need to be considered throughout the framework). I intend to use some lightweight routing to do this, probably using the routing module from ASP.Net core, at least, initialy.&lt;/p&gt;

&lt;h2 id=&#34;support-for-additional-providers&#34;&gt;Support for additional providers&lt;/h2&gt;

&lt;p&gt;The more providers that the project has, the more flexibility you can have inside of your applications. The main providers that I have in mind are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Azure Event Hubs&lt;/li&gt;
&lt;li&gt;Service Fabric Reliable Queues&lt;/li&gt;
&lt;li&gt;Rabbit MQ&lt;/li&gt;
&lt;li&gt;In Memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There isn&amp;rsquo;t really too much to say about each of the above, except that the project will have support for each framework using the native providers. I did toy with the idea of building a complete AMQP library as part of this, but that seems a little overkill for the time being. I&amp;rsquo;ll see how the progression of libraries moving to dotnet core takes shape as another full library is quiet the undertaking.&lt;/p&gt;

&lt;h2 id=&#34;sample-creation-tutorial-series&#34;&gt;Sample creation/tutorial series&lt;/h2&gt;

&lt;p&gt;One of the big pieces that is missing at the moment are public samples of how to use the project in your application. This will help ease the onboarding process for new users/developers.&lt;/p&gt;

&lt;p&gt;Naturally, as part of all of this work, the dependencies will be kept up-to-date &amp;amp; bugs fixed. If there is something that you&amp;rsquo;d like to see, create an issue on &lt;a href=&#34;https://github.com/im5tu/openmessage&#34;&gt;github&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/im5tu&#34;&gt;tweet me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Messaging!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenMessage 1.1 Released</title>
      <link>https://im5tu.io/article/2017/02/openmessage-1.1-released/</link>
      <pubDate>Sun, 05 Feb 2017 15:31:54 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2017/02/openmessage-1.1-released/</guid>
      <description>&lt;p&gt;Just a quick update to say that the Azure provider for &lt;a href=&#34;https://github.com/Im5tu/OpenMessage&#34;&gt;OpenMessage&lt;/a&gt; has been released. This update fixes an issue with scheduling messages on topics.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;As part of this update, the entire solution has been converted to the new (old) csproj system as part of Visual Studio 2017. Over the next few days i&amp;rsquo;ll be posting the roadmap for the project and where I plan to take it next. Feedback and ideas are welcome.&lt;/p&gt;

&lt;p&gt;If you experience any problems, let me know.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>My 2017</title>
      <link>https://im5tu.io/article/2017/01/my-2017/</link>
      <pubDate>Fri, 20 Jan 2017 13:55:18 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2017/01/my-2017/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been thinking about writing this post for a little while now, but never seem to get around to it. I know that I&amp;rsquo;m massively late to the 2017 blog post party, but I didn&amp;rsquo;t really think about it for quite a while. I wanted to refocus and find out what I really wanted to achieve rather than a token guesture that would likely fail like previously. I&amp;rsquo;ve split this out into two main categories below: Personal and Professional Development.
&lt;/p&gt;

&lt;h2 id=&#34;personal-development&#34;&gt;Personal Development&lt;/h2&gt;

&lt;h3 id=&#34;health-fitness&#34;&gt;Health &amp;amp; Fitness&lt;/h3&gt;

&lt;p&gt;This is my primary goal for 2017. I&amp;rsquo;ll be honest and say that 2015 &amp;amp; 2016 wasn&amp;rsquo;t exactly the greatest for me. So much so, I acquired the name &amp;ldquo;the feeder&amp;rdquo; at my previous job. I was always eating. As we all know, eating &amp;amp; a sedentary job means weight gain. I topped out at 106kg approximately. For me, as a former athlete, this was massive.&lt;/p&gt;

&lt;p&gt;Starting off just after Christmas, I purchased both a Fitbit Charge 2 and the Fitbit Aria to begin my transformation (I&amp;rsquo;ll post my thoughts on these products soon). I am tracking as much data as I can including water/food consumption, weight/body fat and mood. With all the data, I hope to make small adjustments (heklo agile!) rather than big shocking changes that i&amp;rsquo;ve previously made. Exercise is not the biggest part of this, it&amp;rsquo;s the nutrional side. So far this month, I have seen a big change. I haven&amp;rsquo;t been as on plan as I would have liked, but I am correcting this day by day and trying to make healthier choices.&lt;/p&gt;

&lt;h3 id=&#34;linguistics&#34;&gt;Linguistics&lt;/h3&gt;

&lt;p&gt;For me, the goal of linguistics falls into two parts: writing and foreign languages. As I blog more throughout the year, I know that my writing will naturally improve as and when I get feedback on posts. As I begin to read more books, i&amp;rsquo;ll learn new and exciting words/phrases that will aid with this also.&lt;/p&gt;

&lt;p&gt;As a British person, I am always amazed everytime that I travel to a different country. Nearly everyone seems to be able to speak English, but we (myself included) cannot return the pleasantaries. So for this aim, i&amp;rsquo;ve downloaded and began using an app called Duolingo to begin learning Dutch. Why Dutch? I seem to be there every year now for dance events so it would be nice to speak the language as to not be so ignorant when I travel. I&amp;rsquo;m off there again next month, so I highly doubt i&amp;rsquo;ll be able to say anything useful, but i&amp;rsquo;m putting in a solid shift with the aim of being able to order some food in Dutch.&lt;/p&gt;

&lt;h3 id=&#34;mentality&#34;&gt;Mentality&lt;/h3&gt;

&lt;p&gt;The above two goals require a strong mindset as there will be the enevitible ups and downs. For this, I have taken inspiration from the likes of &lt;a href=&#34;https://twitter.com/jockowillink&#34;&gt;Jocko Willink&lt;/a&gt;. Jocko is co-author of a book called Extreme Ownership and hosts his own podcast. The podcast is what has been the primary driver behind the changes that I am making. One particular aspect that I liked is when Jocko was talking about a person failing in a situation when he was in the seal teams, to which he responded with &amp;ldquo;Good!&amp;rdquo;. Why good? Well, out of every bad situation comes a chance to learn and progress not only yourselves, but potentially others. Taking a positive spin on everything can only be a good thing!&lt;/p&gt;

&lt;h2 id=&#34;professional-development&#34;&gt;Professional Development&lt;/h2&gt;

&lt;h3 id=&#34;social&#34;&gt;Social&lt;/h3&gt;

&lt;p&gt;I fail at this level in so many ways. If I can just be consistent with getting back to people on LinkedIn, writing more consistently and posting relevant, interesting content then I would be happy. I used to think that blogging was only about writing long technical articles, but there is so much more than that. I hope to open up about what i&amp;rsquo;m doing both technical and non-technical in the coming months.&lt;/p&gt;

&lt;h3 id=&#34;work&#34;&gt;Work&lt;/h3&gt;

&lt;p&gt;After changing my job role towards the back end of last year, I will be looking at consolidating my position and growing within the role. It&amp;rsquo;s my first senior role, so I am getting used to the additional responsibilities that it brings. Moreover, I have transferred from the telecommunications industry to creative. Personally, I think getting a broad set of industry experience is crucial for developers as each industry will present different challenges. It&amp;rsquo;s also my first time working with a CMS system. Coming from a non-CMS background, some quirks have definitely caught me by surprise!&lt;/p&gt;

&lt;p&gt;So that wraps up what I imagine 2017 to be like for me. I&amp;rsquo;ll keep myself accountable by posting regular updates on social media and here on the blog every few months. Thanks for reading, see you again soon!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo Quick Tip: Inlining Css Files</title>
      <link>https://im5tu.io/article/2016/12/hugo-quick-tip-inlining-css-files/</link>
      <pubDate>Thu, 29 Dec 2016 20:25:58 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2016/12/hugo-quick-tip-inlining-css-files/</guid>
      <description>&lt;p&gt;Today I have been doing a little bit of work on my site and one of the things that I wanted to do is inline the css file. It&amp;rsquo;s quite a small file anyway, and once compressed with gzip should make a fairly minimal difference to the size of the page.
&lt;/p&gt;

&lt;h2 id=&#34;the-readfile-function&#34;&gt;The &lt;code&gt;readFile&lt;/code&gt; function&lt;/h2&gt;

&lt;p&gt;In Hugo, the &lt;code&gt;readFile&lt;/code&gt; function looks for a file relative to the current project working directory and returns it as a string. If we had a file located at: &lt;code&gt;&amp;lt;root&amp;gt;/static/css/site.css&lt;/code&gt;, then we could render the file out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;style&amp;gt;{ {- renderFile &amp;quot;/static/css/site.css&amp;quot; -} }&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; &lt;em&gt;Remember to close the squiggly brackets so that Hugo renders it correctly.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is a gotcha with this approach so far. Hugo will try and do its thing with the resultant string and what you will end up with is something along the lines of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;ZgotmplZ&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;as opposed to your intented css contents. Luckily, there is a piped method that we can use to sort this out for us:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;style&amp;gt;{ {- renderFile &amp;quot;css/site.css&amp;quot; | safeCss -} }&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reading-a-hashed-file&#34;&gt;Reading a hashed file&lt;/h2&gt;

&lt;p&gt;As you may recall in &lt;a href=&#34;http://localhost:1313/article/2016/11/blog-building---part-4---frontend/&#34;&gt;my previous Hugo post&lt;/a&gt;, I setup my css files with cache busting capabilites by appending the hash onto the filename. In order to render this as part of the HTML, we need a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find the name of the hashed file&lt;/li&gt;
&lt;li&gt;Build the file path&lt;/li&gt;
&lt;li&gt;Call readFile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to get the hashed file name, we can inspect the site&amp;rsquo;s data sources, looking for the file name (requires post mentioned above):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $siteCssHash := (index .Site.Data.hash &amp;quot;site.css&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we need to build up the correct file path. Note, this is the file path prior to rendering:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $siteCssPath := (printf &amp;quot;/static/css/%s&amp;quot; $siteCssHash) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we need to call &lt;code&gt;readFile&lt;/code&gt; and ensure that it is marked as a safe css string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;style&amp;gt;{{- readFile $siteCssPath | safeCSS -}}&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So putting the three together:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $siteCssHash := (index .Site.Data.hash &amp;quot;site.css&amp;quot;)}}
{{ $siteCssPath := (printf &amp;quot;/static/css/%s&amp;quot; $siteCssHash) }}
&amp;lt;style&amp;gt;{{- readFile $siteCssPath | safeCSS -}}&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s it. When the page reloads/is rebuilt, your pages should now contain inlined css. You can view this &lt;a href=&#34;https://github.com/Im5tu/im5tu-hugo/blob/84ee887616acbe6cfef7e37b0dc9b4779aad31fd/layouts/partials/header/styles.html&#34;&gt;exact commit here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Write Good Code, Not Code Hastily</title>
      <link>https://im5tu.io/article/2016/12/write-good-code-not-code-hastily/</link>
      <pubDate>Wed, 21 Dec 2016 23:25:27 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2016/12/write-good-code-not-code-hastily/</guid>
      <description>&lt;p&gt;This article is a rework of a draft that I&amp;rsquo;ve had sitting in my drafts folder for a long while now. Over the last six months or so, I&amp;rsquo;ve been reviewing a lot more code than I had previously thanks in part to a promotion and in part, code reviewing applicants coding entries. Some of the code has been good, with some code, really not so good!
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; &lt;em&gt;Do everything in your power to not take the shortcut when writing code. It will bite you in the future.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am much the same as everybody else, there is room for improvement in my code - of that I&amp;rsquo;m sure. We are all limited by knowledge: not knowing what we don&amp;rsquo;t know. That&amp;rsquo;s one of the things I enjoy the most about what I do, learning how to do new things to make my life, and others lives, easier in the long run.&lt;/p&gt;

&lt;p&gt;One of the areas that I think 95% of developers can be better at doing is writing clean code. We&amp;rsquo;ve all heard of &lt;a href=&#34;https://cleancoders.com/&#34;&gt;Uncle Bob&lt;/a&gt;, so I won&amp;rsquo;t re-itterate him here. I&amp;rsquo;ve found that senior developers asking for £45,000 cannot recite the SOLID principals correctly (if at all), let alone use them in practise. I use the SOLID principals as one example, but in reality we are talking about clean and reusable code. Code anyone of any level can pickup and understand.&lt;/p&gt;

&lt;h2 id=&#34;on-haste&#34;&gt;On Haste&lt;/h2&gt;

&lt;p&gt;There comes a time in every project where you&amp;rsquo;re up against the clock for one reason or another. Deadline&amp;rsquo;s are coming up quickly and you still haven&amp;rsquo;t finished that module. What do you do? Do you write those unit tests later? Do you take that &amp;ldquo;quick and easy&amp;rdquo; shortcut.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s very easy to take the shortcut and get the work out on time. When you do this, you are deferring that effort until later. Except:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Later equals never&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So what happens when you keep deffering that effort until never? You and your team start to use the phrases like: &amp;ldquo;this needs a complete rewrite&amp;rdquo; or &amp;ldquo;we can&amp;rsquo;t do feature x because it wasn&amp;rsquo;t written in an extensible way&amp;rdquo;. These phrases should be massive red flags. They are a sign that too many shortcuts have been taken in the past which have now come to fruition.&lt;/p&gt;

&lt;p&gt;Back to the example, what should you do? There are a number of things that you can do, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ask for more time to do it properly,&lt;/li&gt;
&lt;li&gt;Attempt to descope some of the work,&lt;/li&gt;
&lt;li&gt;Stay late and put extra effort it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Typically, the first two options are likely your best approach before considering a shortcut or working late. I used often work later as a last resort, though it is something that I am not fond of in any shape or form. This typically means bad quoting/estimating/requirements gathering which is a little outside of scope for this article, so I&amp;rsquo;ll cover this topic in a future post.&lt;/p&gt;

&lt;p&gt;Clean coding can help in preventing us from reaching the situation described above. I gave some advice today, on this very subject, to a junior developer which I don&amp;rsquo;t think is repeated enough, in any form. I&amp;rsquo;ve given it before and i&amp;rsquo;ll give it countless times more:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Take the time and learn how to do it correctly. Practise doing it correctly until it&amp;rsquo;s second nature, even on current projects. You will become faster at it with time and be a better developer for it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Studying by itself is seldom enough. Learning is always best in context. The first few times you try something new, you will inevitably make mistakes. It&amp;rsquo;s natural to make mistakes when learning, we are human afterall. Think of learning like its an agile piece of work. Iterrate and improve (with the help of code reviews).&lt;/p&gt;

&lt;p&gt;Learning the core patterns &amp;amp; principals (eg: SOLID) may slow you down in the early stages of learning as you refer to learning material. However, don&amp;rsquo;t be put off by this. As your knowledege increases, you will be spending less time fighting your way through unreadable code whilst writing code that can be read by all skill levels. Code that is not readable slows everyone down. Yourself included, though you may not realise it at first.&lt;/p&gt;

&lt;h2 id=&#34;on-code-reviews&#34;&gt;On Code Reviews&lt;/h2&gt;

&lt;p&gt;One of the quickest ways to improve the code you&amp;rsquo;re writing is to have it reviewed. Reviews need to be a conscious effort by everyone in a team. How you do the review is up to you. A review can be two people sitting at a desk, or it can be an isolated review. Pick which strategy is best for you. It&amp;rsquo;s just important that it happens.&lt;/p&gt;

&lt;p&gt;Can a junior review a seniors code? Certainly, in my opinion. Juniors should be asking questions about the code and how it works. This forces a greater understanding in what has been written (on both sides) and the core  principals behind the code.&lt;/p&gt;

&lt;p&gt;One of the most common blockers to adopting code reviews is that they take too much time. If you are attempting to review a 3000 file changeset, then of course it will take time. But we must also be asking the question: why has it grown to a 3000 file changeset in the first place? The chances of missing an obvious mistake in a changeset grows exponentially with the size of the changeset. Reviewers get fatigued with large changesets. Where possible, try and keep the changeset small and have it reviewed more frequently by different people. The more eyes on the code, the better, generally.&lt;/p&gt;

&lt;p&gt;Code reviews exist for two primary reasons: to help people learn and catch the obvious mistakes. They should also be &lt;a href=&#34;https://slack.engineering/on-empathy-pull-requests-979e4257d158&#34;&gt;empathetic in nature&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;The scrutineers amongst you will have noticed that the sub-text to this article is all about preventing technical debt. Technical debt is a monster that accrues interest over time. One of the key ways to prevent that debt, is by writing clean code. We should be writing code as clean as we can. The more you write clean code, the quicker you will be at writing it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Your code is your legacy&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blog Building - Part 4 - Frontend</title>
      <link>https://im5tu.io/article/2016/11/blog-building---part-4---frontend/</link>
      <pubDate>Sat, 19 Nov 2016 08:01:38 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2016/11/blog-building---part-4---frontend/</guid>
      <description>&lt;p&gt;So far we have built a very basic site and got a basic understanding of how to configure and override the theme. Next up we are going to configure our frontend workflow using yarn and gulp.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;yarn&#34;&gt;Yarn&lt;/h2&gt;

&lt;p&gt;Yarn is a frontend package manager. It replaces the traditional workflow of npm whilst remaining compatible with the npm registry. This means that we can get all of the speed and security improvements whilst having all the packages that are currently available on the npm registry.&lt;/p&gt;

&lt;h3 id=&#34;installing-node-js&#34;&gt;Installing node.js&lt;/h3&gt;

&lt;p&gt;Unfortunately, it still runs on node, so we need to get that setup first. Head to [the node website]() and install the correct version for your environment. You can verify node is setup correctly post-installation by running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;C:\&amp;gt;node --version
v7.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installing-yarn&#34;&gt;Installing yarn&lt;/h3&gt;

&lt;p&gt;Once node is setup, we can install yarn:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;C:\&amp;gt;npm install yarn -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install yarn so that it is available for all projects, not just our new blog. Once the installation is complete, we can verify yarn is installed by running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;C:\&amp;gt;yarn --version
0.17.6
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;yarn-ing-our-project&#34;&gt;Yarn&amp;rsquo;ing our project&lt;/h2&gt;

&lt;p&gt;Before we begin installing packages inside of our project, I am going to add a &lt;code&gt;.gitignore&lt;/code&gt; file as we will generate a lot of files that we don&amp;rsquo;t want inside of our git respository. Here is what I added to start off with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;node_modules/
data/**/hash.*
static/css/*.css
static/js/*.js
public/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can setup our project to use yarn:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;E:\im5tu-hugo&amp;gt;yarn init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will ask you a series of questions such as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;E:\im5tu-hugo&amp;gt;yarn init
yarn init v0.17.6
question name (im5tu-hugo): im5tu
question version (1.0.0): 0.0.1
question description: Stuart Blackler&#39;s Tech Blog
question entry point (index.js):
question git repository (https://github.com/Im5tu/im5tu-hugo.git):
question author (Stuart Blackler (@im5tu) &amp;lt;im5tu@users.noreply.github.com&amp;gt;):
question license (MIT):
success Saved package.json
Done in 42.93s.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once this is completed, we will have a &lt;code&gt;package.json&lt;/code&gt; file in our root and we can start adding the dependencies that we need. If you don&amp;rsquo;t specify an answer, the default will be taken for you (the default is shown in brackets).&lt;/p&gt;

&lt;h2 id=&#34;gulp&#34;&gt;gulp&lt;/h2&gt;

&lt;p&gt;At this point, I assume that you are fairly familiar with &lt;code&gt;gulp&lt;/code&gt; or at least know what it is. We are going to setup gulp and our initial set of dependencies to do things like minification of files etc. We will add these files as development dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;yarn add gulp -D
yarn add gulp-sass -D
yarn add gulp-autoprefixer -D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to tell gulp what to do by adding a &lt;code&gt;gulpfile.js&lt;/code&gt;. Create this in the website root:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;E:\im5tu-hugo&amp;gt;echo &amp;quot;&amp;quot; &amp;gt; gulpfile.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you may remember from my previous post, anything that gets placed inside of static folder will get copied across to the main website. As I have chosen to use a css preprocessor (scss), we only want the output from the preprocessor to be in the static folder. Inside of the &lt;code&gt;.gitignore&lt;/code&gt; file, I have already put the main css/js files as these should be generated and not a part of main source code.&lt;/p&gt;

&lt;p&gt;Now we can configure &lt;code&gt;gulp&lt;/code&gt; to watch our source directory, process the files and copy the output into the static folder. At the very top of the file we need to require our dependencies, followed by a few configuration variables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var gulp         = require(&amp;quot;gulp&amp;quot;),
    sass         = require(&amp;quot;gulp-sass&amp;quot;),
    autoprefixer = require(&amp;quot;gulp-autoprefixer&amp;quot;),
    srcRootDir   = &amp;quot;src/&amp;quot;,
    destRootDir  = &amp;quot;static/&amp;quot;,
    srcCssDir    = srcRootDir + &amp;quot;css/&amp;quot;,
    srcJsDir     = srcRootDir + &amp;quot;js/&amp;quot;,
    srcCss       = srcCssDir + &amp;quot;**/*.scss&amp;quot;,
    srcJs        = srcJsDir + &amp;quot;**/*.js&amp;quot;,
    destCssDir   = destRootDir + &amp;quot;css&amp;quot;,
    destJsDir    = destRootDir + &amp;quot;js&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have choosen to have a folder structure like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;/root
    /static
        /css
        /js
    /src
        /css
        /js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next inside of our gulp file, we can configure two tasks. One to process any javascript files that we have and another for any scss files that we have:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;gulp.task(&amp;quot;js&amp;quot;, function() {
    gulp
        .src(srcJs)
        .pipe(gulp.dest(destJsDir))
});

gulp.task(&amp;quot;css&amp;quot;, function() {
    gulp
        .src(srcCss)
        .pipe(sass({
            outputStyle: &amp;quot;compressed&amp;quot;
        }))
        .pipe(autoprefixer({
            browsers: [&amp;quot;last 20 versions&amp;quot;]
        }))
        .pipe(gulp.dest(destCssDir))
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, we need to setup a watch task so that as files are changed they are copied to the static folder. When we combine this with hugo&amp;rsquo;s watch ability we have a dynamically changing site that reloads with the changes as we hit save. We also want to setup a default task, so that we can just run &lt;code&gt;gulp&lt;/code&gt; from inside of the root directory on the command line. The watch/default tasks look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;gulp.task(&amp;quot;watch&amp;quot;, [&amp;quot;css&amp;quot;, &amp;quot;js&amp;quot;], function() {
    gulp.watch([srcCss, srcJs], [&amp;quot;css&amp;quot;, &amp;quot;js&amp;quot;]);
});

gulp.task(&amp;quot;default&amp;quot;, [&amp;quot;watch&amp;quot;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In terms of our gulpfile we are all setup and ready to go. At the time of writing there are problems running gulp directly from the command line. In order to work around this, I needed to add the following to the package.json file in our root directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;quot;scripts&amp;quot;: {
    &amp;quot;gulp&amp;quot;: &amp;quot;gulp&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then I can run gulp as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;yarn gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;setting-up-our-site-for-css-js&#34;&gt;Setting up our site for css/js&lt;/h2&gt;

&lt;p&gt;Now that we have our frontend pipeline setup and both the watch commands running, we can begin to change our site to include the files that we want. If you are using the bones theme, you need to create the following two files:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;/root
    /layouts
        /partials
            /body
                scripts.html
            /header
                styles.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside of the scripts file add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;/js/site.js&amp;quot; async&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside of the styles file add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/site.css&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you should be able to add the file &lt;code&gt;/root/src/css/site.scss&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body { background: #ababab }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All being well you should have both files renderd as part of your output.&lt;/p&gt;

&lt;h2 id=&#34;cache-busting&#34;&gt;Cache busting&lt;/h2&gt;

&lt;h3 id=&#34;creating-the-hash&#34;&gt;Creating the hash&lt;/h3&gt;

&lt;p&gt;For our cache busting mechanism, we are going to append the hash of the file to the file. As a new file will be created everytime that our file changes, we will need to clear out the destination css folder. To start, we need to add two more packages, using yarn:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;yarn add gulp-hash -D
yarn add del -D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then add them to our gulpfile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var gulp         = require(&amp;quot;gulp&amp;quot;),
    sass         = require(&amp;quot;gulp-sass&amp;quot;),
    autoprefixer = require(&amp;quot;gulp-autoprefixer&amp;quot;),
    hash         = require(&amp;quot;gulp-hash&amp;quot;),
    del          = require(&amp;quot;del&amp;quot;),
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets create a task to clean out some directories that we are using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;gulp.task(&amp;quot;clean&amp;quot;, function() {
    del([destCssDir, destJsDir, &amp;quot;data&amp;quot;]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can easily clean the directories that we need to at will. This could come in handy at a later date. Next we can change our task definitions to clean up their respective directories:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;gulp.task(&amp;quot;js&amp;quot;, function() {
    del.sync([destJsDir]);
...
gulp.task(&amp;quot;css&amp;quot;, function() {
    del.sync([destCssDir]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we can add the hash of the file prior to writing it to its destination in each task:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;...
.pipe(hash())
.pipe(gulp.dest(...)); // change ... to the relevant destination eg: destCssDir
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;using-the-hashed-file&#34;&gt;Using the hashed file&lt;/h3&gt;

&lt;p&gt;In hugo, the &lt;code&gt;/root/data&lt;/code&gt; directory is used to store any data that we might need. Anything placed in here is accessible through the variable &lt;code&gt;.Site.Data&lt;/code&gt;. So using some more gulp magic, we can store the hahes of the files in here and update our template accordingly.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gulp-hash&lt;/code&gt; has a built in manifest method that will generate a json file containing the hash for us. We can change our gulp tasks to leverage this functionality and place it inside of the &lt;code&gt;/root/data&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// js gulp task
...
.pipe(gulp.dest(destJsDir))
.pipe(hash.manifest(&amp;quot;hash.json&amp;quot;))
.pipe(gulp.dest(&amp;quot;data/&amp;quot;));

// css gulp task
...
.pipe(gulp.dest(destCssDir))
.pipe(hash.manifest(&amp;quot;hash.json&amp;quot;))
.pipe(gulp.dest(&amp;quot;data/&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart our gulp task and now you should see the hash files being generated. If we open up the hash files, you should see something along the lines of:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;{&amp;quot;site.css&amp;quot;:&amp;quot;site-da39a3ee.css&amp;quot;,&amp;quot;site.js&amp;quot;:&amp;quot;site-da39a3ee.js&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All that&amp;rsquo;s left to do is to use these hashes inside of our layouts. Luckily, GO has a built in function called &lt;code&gt;index&lt;/code&gt; which accepts a map and an index and returns the value of the map with the given index. So in our templates, we simply need to ask for the right files. Let&amp;rsquo;s first change our stylesheet in &lt;code&gt;/layouts/partials/styles.html&lt;/code&gt; to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/{{ index .Site.Data.hash &amp;quot;site.css&amp;quot; }}&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, let&amp;rsquo;s change our script template to do the same (&lt;code&gt;/layouts/partials/body/scripts&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;/js/{{ index .Site.Data.hash &amp;quot;site.js&amp;quot;}}&amp;quot; async&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have a fully functional pipeline for frontend work. To start up the pipeline, you need to run two commands from different command line windows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;yarn gulp
hugo server -D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then you can make changes to your files at will. Happy FED&amp;rsquo;ing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blog Building - Part 3 - Theming</title>
      <link>https://im5tu.io/article/2016/11/blog-building---part-3---theming/</link>
      <pubDate>Fri, 18 Nov 2016 19:01:38 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2016/11/blog-building---part-3---theming/</guid>
      <description>&lt;p&gt;In this article, I will show you how the theme has been constructed and show you how the overrides work. So far we have created a site, setup most of our workflow and posted our first article.
&lt;/p&gt;

&lt;p&gt;When we installed the theme in the previous post, a series of conventions took over and began the process of rending our pages for us. Because hugo is convention based, we can override the defaults by placing files in the correct place, but first we need to understand the layout. Below you can see the parts of the website that we care about the most:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;/root
    /archetypes
    /content
    /layouts
    /static
    /themes
        /themeA
            /archetypes
            /layouts
                /_default
                /indexes
                /partials
                /taxonomy
            index.html
        /themeB
            &amp;lt;as above&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;defaults&#34;&gt;Defaults&lt;/h2&gt;

&lt;p&gt;When hugo begins to render a site, the configuration is checked to see if there is a theme configured. If a theme is configured, it looks for that theme under the &lt;code&gt;themes&lt;/code&gt; directory by checking for a &lt;code&gt;theme.toml&lt;/code&gt; file under each sub-directory. If one of the &lt;code&gt;theme.toml&lt;/code&gt; files contains the correct theme name, that theme is loaded and the used as the default for the rest of the rending.&lt;/p&gt;

&lt;p&gt;From the directory listing above, you will notice that there are two &lt;code&gt;layouts&lt;/code&gt; folders. One under the site root and one under themeA. As far as I am aware, the layout of each &lt;code&gt;layouts&lt;/code&gt; folder is identical. This means that if your theme defines something under &lt;code&gt;/root/themes/themeA/layouts/_default/list.html&lt;/code&gt; we can override it by placing a file in &lt;code&gt;/root/layouts/_default/list.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we know this, we can customise the theme how we see fit.&lt;/p&gt;

&lt;h2 id=&#34;rendering&#34;&gt;Rendering&lt;/h2&gt;

&lt;p&gt;Before continuing, I strongly recommend that you read the &lt;a href=&#34;http://gohugo.io/templates/go-templates/&#34;&gt;Go Template Primer&lt;/a&gt; created by the hugo team. Don&amp;rsquo;t worry, i&amp;rsquo;ll wait.&lt;/p&gt;

&lt;h3 id=&#34;baseof&#34;&gt;baseOf&lt;/h3&gt;

&lt;p&gt;A theme creator may decide, like I have for bones, to create a &lt;code&gt;baseOf&lt;/code&gt; file under the &lt;code&gt;/root/themes/&amp;lt;theme name&amp;gt;/_default/&lt;/code&gt; folder. This special file allows you to create a master layout, keeping your theme nice and clean. Inside of file, you can define blocks which another page can also define and implement. What happens here is that the &lt;code&gt;baseOf&lt;/code&gt; file says &amp;ldquo;You can configure this section called ABC&amp;rdquo;. Then inside of another file, eg: article/full.html, we can say &amp;ldquo;I want to configure section called ABC and here is what it should contain&amp;rdquo;. In hugo speak, this is called &lt;a href=&#34;http://gohugo.io/templates/blocks/&#34;&gt;Block Templates&lt;/a&gt; and is how the whole of the bones theme is configured.&lt;/p&gt;

&lt;p&gt;You can see an example of this &lt;a href=&#34;https://github.com/Im5tu/hugo-bones/blob/master/layouts/_default/baseof.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;render&#34;&gt;.Render&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://gohugo.io/templates/functions/#render&#34;&gt;.Render&lt;/a&gt; function is a special kind of function that you can call when rendering a list. It&amp;rsquo;s like rendering a partial view but for the current item in an enumeration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{ range .Data.Pages }}
    {{ .Render &amp;quot;summary&amp;quot;}}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above sample will inspect the page data and enumerate all the available pages associated with the current page before calling render on each item. C#/Java would look something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;foreach(var page in this.Data.Pages)
    Render(&amp;quot;summary&amp;quot;, currentItem);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see an example of this &lt;a href=&#34;https://github.com/Im5tu/hugo-bones/blob/master/layouts/article/list.html#L4&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;partial&#34;&gt;partial&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/templates/partials/&#34;&gt;Partial templates&lt;/a&gt; are often used to separate out sections of a site into reusable components. The main difference between &lt;code&gt;partial&lt;/code&gt; and &lt;code&gt;.Render&lt;/code&gt; is that partial can be used to render whole sections of a site with a specific context where is &lt;code&gt;.Render&lt;/code&gt; is limited to the current item in an enumeration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&amp;lt;body&amp;gt;
{{ block &amp;quot;content&amp;quot; . -}} {{- end }}
{{- partial &amp;quot;header/scripts&amp;quot; . -}}
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above &lt;a href=&#34;https://github.com/Im5tu/hugo-bones/blob/master/layouts/_default/baseof.html&#34;&gt;example from the baseOf file from bones&lt;/a&gt; does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Says to the theming engine that it wants to declare an overridable section content, passing in the current page context&lt;/li&gt;
&lt;li&gt;Render the partial called &lt;code&gt;scripts&lt;/code&gt;, located under the &lt;code&gt;header&lt;/code&gt; folder, inside of the &lt;code&gt;partials&lt;/code&gt; folder, supplying the current page context&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All partials are located under &lt;code&gt;&amp;lt;root/theme&amp;gt;/layouts/partials/&amp;lt;path&amp;gt;&lt;/code&gt;. Where &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; is the folder structure to the file.&lt;/p&gt;

&lt;p&gt;You can see an example of this &lt;a href=&#34;https://github.com/Im5tu/hugo-bones/blob/master/layouts/_default/baseof.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;archetypes&#34;&gt;Archetypes&lt;/h2&gt;

&lt;p&gt;Archetypes are really just a fancy way of saying content types. A theme can define them for you, or you can define your own like I have for the bones theme.&lt;/p&gt;

&lt;p&gt;You can see an example of that &lt;a href=&#34;https://github.com/Im5tu/hugo-bones/blob/master/archetypes/article.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-static&#34;&gt;The Static&lt;/h2&gt;

&lt;p&gt;Anything under the static folder, will get copied across to the main site when it gets rendered. This behaved slightly differently than I expected when I first tried this out. I had a file located under &lt;code&gt;/root/static/img/img1.jpg&lt;/code&gt;. When I attempted to render an image tag on the page with the src set to &lt;code&gt;/static/img/img1.jpg&lt;/code&gt; it didn&amp;rsquo;t work. When I rendered the files to disk by calling &lt;code&gt;hugo&lt;/code&gt; and checking the public folder, I could see that it rendered the image under &lt;code&gt;/img/img1.jpg&lt;/code&gt;. Slightly different that what I was expecting, but it still worked nevertheless.&lt;/p&gt;

&lt;p&gt;Hopefully you will now have a basic understanding of how a theme is constructed so that you can roll your own and override portions of the theme you have selecting. Next up, I will setup my frontend pipeline of choice so that I can start applying styling to my site.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blog Building - Part 2 - My First Post</title>
      <link>https://im5tu.io/article/2016/11/blog-building---part-2---my-first-post/</link>
      <pubDate>Thu, 17 Nov 2016 23:01:38 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2016/11/blog-building---part-2---my-first-post/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://im5tu.io/article/2016/11/blog-building---part-1---hello-hugo/&#34;&gt;the last article&lt;/a&gt;, we setup our workflow and all the pieces that you will need to create a new site. Now we need to install a theme and begin publishing. Prior to writing this series, I began evaluating the extensibility of hugo themes and started work on something I call bones - a no thrills template with no styling, just structure. As I improve the template it will become more useful, maybe. It will remain the template behind mysite as I continue to improve it.
&lt;/p&gt;

&lt;h2 id=&#34;installing-a-theme&#34;&gt;Installing a theme&lt;/h2&gt;

&lt;p&gt;To install a theme, you need to know the repositories git url. You can see additional themes at &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;http://themes.gohugo.io/&lt;/a&gt;. I will be using my &lt;a href=&#34;https://github.com/Im5tu/hugo-bones.git&#34;&gt;bones theme&lt;/a&gt; as the base.&lt;/p&gt;

&lt;p&gt;Once you have the themes git url:
    - Open the command line to repository that has our generation files in it
    - Change directories to the themes folder
    - Clone the git repo to this location, eg: &lt;code&gt;git clone https://github.com/Im5tu/hugo-bones.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once the repository is cloned, we need to tell hugo how to use our new theme. To do this we need to open the &lt;code&gt;config.toml&lt;/code&gt; file inside of the root directory and create an entry called theme. When this is done, your config file should look something along the lines of the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;baseurl = &amp;quot;http://example.org/&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
theme = &amp;quot;hugo-bones&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whilst I am here, I am going to change the other properties accordingly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;baseurl = &amp;quot;https://im5tu.io/&amp;quot;
title = &amp;quot;Stuart Blackler&#39;s Tech Blog&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
theme = &amp;quot;hugo-bones&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t forget to save the file. It&amp;rsquo;s also probably a good idea to commit your progress as you go.&lt;/p&gt;

&lt;h2 id=&#34;creating-our-first-post&#34;&gt;Creating our first post&lt;/h2&gt;

&lt;p&gt;Now that we have our theme all setup, we should probably create a hello world post. Assuming that you are using the bones theme like me, we can go back the root of our repository and run this command to generate a new post: &lt;code&gt;hugo new article\hello-world.md&lt;/code&gt;. This creates a file under the &lt;code&gt;content\article&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;We can preview this site by running the command: &lt;code&gt;hugo server -D&lt;/code&gt; and navigating to &lt;code&gt;http://localhost:1313/&lt;/code&gt;. All being well you should see the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://im5tu.io/img/blog-building-part-2/first-post.JPG&#34; alt=&#34;First Post Image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;One of the great things about hugo is that it has live reload capabilities built in. This means that we can navigate to the page that we want to edit in the browser and everytime we make a change to the file, it will be synced to the screen. Try it! This magic happens because we called &lt;code&gt;hugo server&lt;/code&gt; which, in a way, breaks down to mean:
    - &lt;code&gt;hugo&lt;/code&gt;: build my site please
    - &lt;code&gt;server&lt;/code&gt;: load a simple http server with my content&lt;/p&gt;

&lt;p&gt;Additionally, I added the flag &lt;code&gt;-D&lt;/code&gt; which means that I want to build draft posts. In the template that I created, I wanted to create everything as a draft so that I could work on it in isolation and be safe in the knowledge that I wouldn&amp;rsquo;t accidently post something that wasn&amp;rsquo;t ready.&lt;/p&gt;

&lt;h2 id=&#34;additional-configuration&#34;&gt;Additional configuration&lt;/h2&gt;

&lt;p&gt;Before I finish up this post and write more, I want to change a few of the configuration options. Personally, I like working with json rather than yaml/toml inside of the markdown files, it feels more natural to me. Other changes that I wish to make include: changing permalink styles, output verbosity and enabling the robots.txt file.&lt;/p&gt;

&lt;p&gt;In order to make these changes, we need to once more open the &lt;code&gt;config.toml&lt;/code&gt; file and add the properties as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;baseurl = &amp;quot;https://im5tu.io/&amp;quot;
title = &amp;quot;Stuart Blackler&#39;s Tech Blog&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
theme = &amp;quot;hugo-bones&amp;quot;
metaDataFormat = &amp;quot;json&amp;quot;
enableRobotsTXT = true
[permalinks]
	article = &amp;quot;article/:year/:month/:title/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;One of the next things that I will be doing is working with the template to ensure that everything is setup in terms of category/tag pages, rss feeds etc. This, although unstyled, will be enough to begin pushing to the live site.&lt;/p&gt;

&lt;p&gt;After that is complete, I will be setting up gulp to build, clean and minify my javascript and css files. From there I can start working on the visual styling of the site. I will blog the entire process, but this may take some time as I figure out exactly what I want.&lt;/p&gt;

&lt;p&gt;Finally, it&amp;rsquo;s setting up Github and Cloudflare so that everyone can enjoy an SSL enabled site around the world at blazing speeds.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blog Building - Part 1 - Hello Hugo</title>
      <link>https://im5tu.io/article/2016/11/blog-building---part-1---hello-hugo/</link>
      <pubDate>Thu, 17 Nov 2016 20:23:00 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2016/11/blog-building---part-1---hello-hugo/</guid>
      <description>&lt;p&gt;As promised in this first mini-series, I am going to guide you through the steps that I have taken to get my blog up and running on Github pages and Cloudflare with SSL. As these the steps that I have taken to get this blog up and running, your milage may vary with this as different versions get released. That said, you should be fine.
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NB: I had already pushed a hello world up into my hosted repository with an index file containing hello world before I decided to write this guide.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;prerequisite-installing-git&#34;&gt;Prerequisite: Installing Git&lt;/h2&gt;

&lt;p&gt;The likelyhood is that you&amp;rsquo;ve already installed git, but if you haven&amp;rsquo;t download and install the latest version of git from &lt;a href=&#34;https://git-scm.com/&#34;&gt;the git website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installing-hugo&#34;&gt;Installing Hugo&lt;/h2&gt;

&lt;p&gt;Now that we have git installed, we are ready and raring to go. I&amp;rsquo;m going to make the assumption that you are on Windows with the instructions. We are going to install go, then use go to install hugo from source, installing all the updates as we go.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigate in your favourite browser to: &lt;a href=&#34;https://golang.org/dl/&#34;&gt;https://golang.org/dl/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download the installer of choice and follow the instructions in the installer, making a note of installation directory (eg: &lt;code&gt;E:\GoLang\&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Open a new command prompt and enter: &lt;code&gt;echo %GOROOT%&lt;/code&gt;. You should see the installation directory echo&amp;rsquo;d out to the console window. Close the command prompt for the next step&lt;/li&gt;
&lt;li&gt;Next, we need to ensure that &lt;code&gt;GOPATH&lt;/code&gt; is set on your path

&lt;ul&gt;
&lt;li&gt;Right click on the start button&lt;/li&gt;
&lt;li&gt;Click on System&lt;/li&gt;
&lt;li&gt;Click on Advanced System Settings on the left&lt;/li&gt;
&lt;li&gt;Click on the Environment Variables� button on the bottom&lt;/li&gt;
&lt;li&gt;In the User variables section, click the New� button&lt;/li&gt;
&lt;li&gt;Type the name &lt;code&gt;GOPATH&lt;/code&gt; for the variable name&lt;/li&gt;
&lt;li&gt;In the value textbox, type in the folder where you wish to extract hugo to. Eg: &lt;code&gt;E:\GoLang\&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;With the Environment Variables window open still, edit the PATH variable under user to include `%GOPATH%\bin&lt;/li&gt;
&lt;li&gt;Re-open any command prompt windows so that the variables take effect&lt;/li&gt;
&lt;li&gt;Now we are ready to install hugo by running the following command: &lt;code&gt;go get -u -v github.com/spf13/hugo&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This will download hugo, update its dependencies and build hugo. Expect this process to take 5 minutes or so.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Verify that hugo has downloaded successfully by running &lt;code&gt;hugo --help&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;configuring-git&#34;&gt;Configuring Git&lt;/h2&gt;

&lt;p&gt;Typically you can host on Github pages for two scenarios: Project pages or User/Organisation pages. When you are hosting the former, you will have a branch named &lt;code&gt;gh-pages&lt;/code&gt; which hosts the site within the project. The latter is what we are going to setup which requires the site to be present on the master branch. For this, we are going to use git submodules. This will mean that we actually have two repositories created, one for the hosted site and one for the structure code. This is actually quiet a nice way around an otherwise awkward branching model.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create repository &lt;code&gt;&amp;lt;github-handle&amp;gt;.github.io&lt;/code&gt;, eg: &lt;code&gt;im5tu.github.io&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This repository will contain the finished site&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create repository &lt;code&gt;&amp;lt;github-handle&amp;gt;-hugo&lt;/code&gt;, eg: &lt;code&gt;im5tu-hugo&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This repository will contain all of the generation code and templates etc&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create a location on disk where you will store the generation files and navigate to that directory on the command line

&lt;ul&gt;
&lt;li&gt;Eg: &lt;code&gt;mkdir E:\im5tu-hugo &amp;amp;&amp;amp; cd E:\im5tu-hugo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Next run the following command to make a new site in the new directory: &lt;code&gt;hugo new site .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s probably a good time to create the git respository and commit the code we have currently

&lt;ul&gt;
&lt;li&gt;To initialize the git repository: &lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add all the current files: &lt;code&gt;git add -A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Commit all of the files: &lt;code&gt;git commit -am &amp;quot;Initial Commit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the remote url of your Github repository: &lt;code&gt;git remote add origin https://github.com/Im5tu/im5tu-hugo.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Push the code to your new repository: &lt;code&gt;git push -u origin master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Next we are going to create a sub-module in the public directory. This folder is where the generated output goes.

&lt;ul&gt;
&lt;li&gt;I used GitKraken to do this, but you could do it from the command line also:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git submodule add -b master git@github.com:&amp;lt;github-handle&amp;gt;/&amp;lt;github-handle&amp;gt;.github.io.git public&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Now we have that setup, commit everything again

&lt;ul&gt;
&lt;li&gt;Commit all of the files: &lt;code&gt;git commit -am &amp;quot;Initialized submodules&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Push the code to Github: &lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From now on, when we generate our site with &lt;code&gt;hugo&lt;/code&gt; (the way we will generate our site) the files will be generated inside of the public directory. Then its a case of either committing the files in the main repository or changing to the public folder and committing the changes in that repository to push it to our live site.&lt;/p&gt;

&lt;p&gt;Out of curiosity, I tested to make sure that they have different git histories:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;E:\im5tu-hugo&amp;gt;git log --oneline
f3c2595 Initialized submodules
e60426b Initial commit

E:\im5tu-hugo&amp;gt;cd public &amp;amp;&amp;amp; git log --oneline
ef81fbc Create CNAME
3043605 Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be verified on both repositories &lt;a href=&#34;https://github.com/Im5tu/im5tu-hugo/commits/master&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/Im5tu/im5tu.github.io/commits/master&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;So far we have created our git repositories, installed both Go Lang and hugo and setup our workflow ready to begin work on our site. In the next article, I will begin adding a theme so that we can start publishing the posts that we are writing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://im5tu.io/article/2016/11/hello-world/</link>
      <pubDate>Thu, 17 Nov 2016 19:34:17 +0000</pubDate>
      
      <guid>https://im5tu.io/article/2016/11/hello-world/</guid>
      <description>&lt;p&gt;Hello World. Safe to say it&amp;rsquo;s been a little while since I have blogged or even had a website come to think of it. Alas, I am back with some fresh ideas and recharged to help you dear reader.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Finally I&amp;rsquo;ve been able to match up my Github/Twitter handles with my website to make things alot easier to find. I&amp;rsquo;ve also began to build this site on a static site generator called hugo, hosted by Github pages and delivered through Cloudflare. My first port of call is to show you how i&amp;rsquo;ve done it should you wish to re-create my steps for yourself. Naturally, steps may vary as time progresses and things change - so feel free to fix any instructions on my &lt;a href=&#34;https://github.com/Im5tu/im5tu-hugo&#34;&gt;Github repository&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>