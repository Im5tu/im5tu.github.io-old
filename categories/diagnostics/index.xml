<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>diagnostics on Stuart Blackler's Blog</title><link>https://im5tu.io/categories/diagnostics/</link><description>Recent content in diagnostics on Stuart Blackler's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 25 Jun 2020 22:56:00 +0100</lastBuildDate><atom:link href="https://im5tu.io/categories/diagnostics/index.xml" rel="self" type="application/rss+xml"/><item><title>Diagnostics in .Net Core 3: An alternative approach to using dotnet-counters with Docker</title><link>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-an-alternative-approach-to-using-dotnet-counters-with-docker/</link><pubDate>Thu, 25 Jun 2020 22:56:00 +0100</pubDate><guid>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-an-alternative-approach-to-using-dotnet-counters-with-docker/</guid><description>&lt;p>In a &lt;a href="https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-using-dotnet-counters-with-docker/">previous article&lt;/a>, we took a look at a way to use &lt;code>dotnet-counters&lt;/code> with an external image. This article takes a look at how we can embed the tooling that we require into the image so that we extract the counter/memory information as required. This approach does not require elevated permissions as before.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: Listening to inbound HTTP requests</title><link>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-inbound-http-requests/</link><pubDate>Fri, 19 Jun 2020 14:00:00 +0000</pubDate><guid>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-inbound-http-requests/</guid><description>&lt;p>In my &lt;a href="https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-outbound-http-requests/">previous article&lt;/a> we took a look at how to monitor outbound HTTP requests using a &lt;code>DiagnosticListener&lt;/code>. In this article, we will re-use some of the same components to monitor inbound HTTP requests. We could use middleware to do as most approaches do, but this approach is highly dependent on the middleware that you have and the duration of this, so we will re-use some of the code from last time.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: Listening to outbound HTTP requests</title><link>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-outbound-http-requests/</link><pubDate>Thu, 18 Jun 2020 01:34:00 +0000</pubDate><guid>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-outbound-http-requests/</guid><description>&lt;p>Throughout the course of my Diagnostics in .Net Core series, we&amp;rsquo;ve taken a look at the basics of how to use the Event Counters API. In this article, we will take a look at how we can capture all outbound HTTP requests automatically as they occur.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: Using dotnet-counters with Docker</title><link>https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-using-dotnet-counters-with-docker/</link><pubDate>Sat, 25 Jan 2020 13:00:00 +0000</pubDate><guid>https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-using-dotnet-counters-with-docker/</guid><description>&lt;p>In my &lt;a href="https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/">previous post&lt;/a>, I described how we can leverage the new EventCounter diagnostics API to add custom event counters and listen for built in counters. In this article, I will walk through how we can leverage the &lt;code>dotnet-counters&lt;/code> tool with a running docker image.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: Event Counters</title><link>https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/</link><pubDate>Sun, 05 Jan 2020 14:00:00 +0000</pubDate><guid>https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/</guid><description>&lt;p>Recently, I&amp;rsquo;ve been playing with the new &lt;a href="https://devblogs.microsoft.com/dotnet/introducing-diagnostics-improvements-in-net-core-3-0/">diagnostic improvements in .Net Core 3&lt;/a>. Traditionally, I&amp;rsquo;ve always used the great &lt;a href="https://github.com/AppMetrics/AppMetrics">AppMetrics&lt;/a> package to capture the metrics from our applications and send scrape them with a &lt;a href="https://github.com/prometheus/prometheus">Prometheus&lt;/a> &amp;amp; &lt;a href="https://github.com/grafana/grafana">Grafana&lt;/a> setup. Whilst reading about the improvements, I wondered whether or not it would be possible to push metrics to &lt;a href="https://github.com/prometheus/prometheus">Prometheus&lt;/a>.&lt;/p></description></item></channel></rss>